(f "/Users/ddm/ws/projects/Vulcan/bio-chap12.txt")

analyzing /Users/ddm/ws/projects/Vulcan/bio-chap12.txt



regulation of the cell cycle
 	
Section: A molecular control system drives the cell cycle
 

The timing and rate of cell division in different parts of a plant or animal are crucial to normal growth, development, and maintenance. The frequency of cell division varies with the type of cell. For example, human skin cells divide frequently throughout life, whereas liver cells maintain the ability to divide but keep it in reserve until an appropriate need arises--say, to repair a wound. Some of the most specialized cells, such as mature nerve cells and muscle cells, do not divide at all in a mature human. These cell cycle differences result from regulation at the molecular level. The mechanisms of this regulation are of intense interest, not only for understanding the life cycles of normal cells but also for understanding how cancer cells manage to escape normal controls.


A molecular control system drives the cell cycle

What drives the cell cycle? One reasonable hypothesis might be that each event in the cycle triggers the next. According to this hypothesis, for example, the replication of chromosomes in the S phase might cause cell growth during G2, which might in turn directly trigger the onset of mitosis. However, this apparently logical hypothesis is not in fact correct.

In the early 1970s, a variety of experiments suggested an alternative hypothesis: that the cell cycle is driven by specific chemical signals present in the cytoplasm. Some of the first strong evidence for this hypothesis came from experiments with mammalian cells grown in

Stack overflow (signal 1000)
   [Condition of type excl:synchronous-operating-system-signal]

Restarts:
 0: [continue] continue computation
 1: [retry] Retry SLIME REPL evaluation request.
 2: [abort] Return to SLIME's top level.
 3: [abort] Abort entirely from this (lisp) process.

Backtrace:
  0: (swank:invoke-slime-debugger #<excl:synchronous-operating-system-signal @ #x1172f31a>)
  1: ((:internal swank:swank-debugger-hook 1))
  2: ((:internal (:top-level-form "swank-backend.lisp" 22581) 0) #<Function swank-debugger-hook> #<Closure (:internal swank:swank-debugger-hook 1) @ #x11732ae2>)
  3: (swank-backend:call-with-debugger-hook #<Function swank-debugger-hook> #<Closure (:internal swank:swank-debugger-hook 1) @ #x11732ae2>)
  4: (swank:swank-debugger-hook #<excl:synchronous-operating-system-signal @ #x1172f31a> #<Function swank-debugger-hook>)
  5: (cerror "continue computation" excl:synchronous-operating-system-signal :format-control "Stack overflow (signal 1000)" :format-arguments ...)
  6: (let* ((#1=#:g10653 (cdr excl::**macroarg**)) (keyword (excl::car-fussy #1# 'keyword)) (arguments (cdr #1#))) `(tr/expr ,keyword ,@arguments))
  7: (let* () (let* ((#:g10653 #) (keyword #) (arguments #)) `(tr/expr ,keyword ,@arguments)))
  8: (tr (tr :introduce-leading-brackets label) #<Augmentable interpreter environment 1 1 1 1>)
  9: (macroexpand-1 (tr :introduce-leading-brackets label) #<Augmentable interpreter environment 1 1 1 1> t)
 10: (macroexpand (tr :introduce-leading-brackets label) #<Augmentable interpreter environment 1 1 1 1> t)
 11: (introduce-leading-brackets #<word "in"> #<position285 285 "in">)
 12: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 13: (scan-next-pos #<position285 285 "in">)
 14: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 15: (check-for-[-from-prior-word #<position285 285 "in"> #<word "grown">)
 16: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 17: (check-for-]-from-prior-word #<position285 285 "in"> #<word "grown">)
 18: (introduce-right-side-brackets #<word "grown"> #<position285 285 "in">)
 19: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 20: (introduce-terminal-edges #<word "grown"> #<position284 284 "grown"> #<position285 285 "in">)
 21: (let ((position-after (chart-position-after position-before))) ..)
 22: (word-level-actions #<word "grown"> #<position284 284 "grown">)
 23: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 24: (cwlft-cont #<word "grown"> #<position284 284 "grown">)
 25: (let ((#:g357942 (pos-capitalization position-before))) ..)
 26: (check-word-level-fsa-trigger #<word "grown"> #<position284 284 "grown">)
 27: (check-for/initiate-scan-patterns #<word "grown"> #<position284 284 "grown">)
 28: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 29: (check-for-[-from-word-after #<word "grown"> #<position284 284 "grown">)
 30: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 31: (check-for-]-from-word-after #<word "grown"> #<position284 284 "grown">)
 32: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 33: (scan-next-pos #<position284 284 "grown">)
 34: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 35: (check-for-[-from-prior-word #<position284 284 "grown"> #<word "cells">)
 36: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 37: (check-for-]-from-prior-word #<position284 284 "grown"> #<word "cells">)
 38: (introduce-right-side-brackets #<word "cells"> #<position284 284 "grown">)
 39: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 40: (introduce-terminal-edges #<word "cells"> #<position283 283 "cells"> #<position284 284 "grown">)
 41: (let ((position-after (chart-position-after position-before))) ..)
 42: (word-level-actions #<word "cells"> #<position283 283 "cells">)
 43: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 44: (cwlft-cont #<word "cells"> #<position283 283 "cells">)
 45: (let ((#:g357923 (pos-capitalization position-before))) ..)
 46: (check-word-level-fsa-trigger #<word "cells"> #<position283 283 "cells">)
 47: (check-for/initiate-scan-patterns #<word "cells"> #<position283 283 "cells">)
 48: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 49: (check-for-[-from-word-after #<word "cells"> #<position283 283 "cells">)
 50: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 51: (check-for-]-from-word-after #<word "cells"> #<position283 283 "cells">)
 52: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 53: (scan-next-pos #<position283 283 "cells">)
 54: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 55: (check-for-[-from-prior-word #<position283 283 "cells"> #<word "mammalian">)
 56: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 57: (check-for-]-from-prior-word #<position283 283 "cells"> #<word "mammalian">)
 58: (introduce-right-side-brackets #<word "mammalian"> #<position283 283 "cells">)
 59: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 60: (introduce-terminal-edges #<word "mammalian"> #<position282 282 "mammalian"> #<position283 283 "cells">)
 61: (let ((position-after (chart-position-after position-before))) ..)
 62: (word-level-actions #<word "mammalian"> #<position282 282 "mammalian">)
 63: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 64: (cwlft-cont #<word "mammalian"> #<position282 282 "mammalian">)
 65: (let ((#:g357904 (pos-capitalization position-before))) ..)
 66: (check-word-level-fsa-trigger #<word "mammalian"> #<position282 282 "mammalian">)
 67: (check-for/initiate-scan-patterns #<word "mammalian"> #<position282 282 "mammalian">)
 68: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 69: (check-for-[-from-word-after #<word "mammalian"> #<position282 282 "mammalian">)
 70: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 71: (check-for-]-from-word-after #<word "mammalian"> #<position282 282 "mammalian">)
 72: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 73: (scan-next-pos #<position282 282 "mammalian">)
 74: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 75: (check-for-[-from-prior-word #<position282 282 "mammalian"> #<word "with">)
 76: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 77: (check-for-]-from-prior-word #<position282 282 "mammalian"> #<word "with">)
 78: (introduce-right-side-brackets #<word "with"> #<position282 282 "mammalian">)
 79: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 80: (check-edge-fsa-trigger (#<edge160 281 "with" 282>) #<position281 281 "with"> #<word "with"> #<position282 282 "mammalian">)
 81: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 82: (check-preterminal-edges (#<edge160 281 "with" 282>) #<word "with"> #<position281 281 "with"> #<position282 282 "mammalian">)
 83: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 84: (introduce-terminal-edges #<word "with"> #<position281 281 "with"> #<position282 282 "mammalian">)
 85: (let ((position-after (chart-position-after position-before))) ..)
 86: (word-level-actions #<word "with"> #<position281 281 "with">)
 87: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 88: (cwlft-cont #<word "with"> #<position281 281 "with">)
 89: (let ((#:g357875 (pos-capitalization position-before))) ..)
 90: (check-word-level-fsa-trigger #<word "with"> #<position281 281 "with">)
 91: (check-for/initiate-scan-patterns #<word "with"> #<position281 281 "with">)
 92: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 93: (check-for-[-from-word-after #<word "with"> #<position281 281 "with">)
 94: (scan-next-segment #<position281 281 "with">)
 95: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 96: (check-for-]-from-word-after #<word "with"> #<position281 281 "with">)
 97: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 98: (scan-next-pos #<position281 281 "with">)
 99: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 100: (check-for-[-from-prior-word #<position281 281 "with"> #<word "experiments">)
 101: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 102: (check-for-]-from-prior-word #<position281 281 "with"> #<word "experiments">)
 103: (introduce-right-side-brackets #<word "experiments"> #<position281 281 "with">)
 104: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 105: (introduce-terminal-edges #<word "experiments"> #<position280 280 "experiments"> #<position281 281 "with">)
 106: (let ((position-after (chart-position-after position-before))) ..)
 107: (word-level-actions #<word "experiments"> #<position280 280 "experiments">)
 108: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 109: (cwlft-cont #<word "experiments"> #<position280 280 "experiments">)
 110: (let ((#:g357851 (pos-capitalization position-before))) ..)
 111: (check-word-level-fsa-trigger #<word "experiments"> #<position280 280 "experiments">)
 112: (check-for/initiate-scan-patterns #<word "experiments"> #<position280 280 "experiments">)
 113: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 114: (check-for-[-from-word-after #<word "experiments"> #<position280 280 "experiments">)
 115: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 116: (check-for-]-from-word-after #<word "experiments"> #<position280 280 "experiments">)
 117: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 118: (scan-next-pos #<position280 280 "experiments">)
 119: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 120: (check-for-[-from-prior-word #<position280 280 "experiments"> #<word "from">)
 121: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 122: (check-for-]-from-prior-word #<position280 280 "experiments"> #<word "from">)
 123: (introduce-right-side-brackets #<word "from"> #<position280 280 "experiments">)
 124: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 125: (check-edge-fsa-trigger (#<edge158 279 "from" 280> #<edge159 279 prep-location 280>) #<position279 279 "from"> #<word "from"> #<position280 280 "experiments">)
 126: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 127: (check-preterminal-edges (#<edge158 279 "from" 280> #<edge159 279 prep-location 280>) #<word "from"> #<position279 279 "from"> #<position280 280 "experiments">)
 128: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 129: (introduce-terminal-edges #<word "from"> #<position279 279 "from"> #<position280 280 "experiments">)
 130: (let ((position-after (chart-position-after position-before))) ..)
 131: (word-level-actions #<word "from"> #<position279 279 "from">)
 132: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 133: (cwlft-cont #<word "from"> #<position279 279 "from">)
 134: (let ((#:g357822 (pos-capitalization position-before))) ..)
 135: (check-word-level-fsa-trigger #<word "from"> #<position279 279 "from">)
 136: (check-for/initiate-scan-patterns #<word "from"> #<position279 279 "from">)
 137: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 138: (check-for-[-from-word-after #<word "from"> #<position279 279 "from">)
 139: (scan-next-segment #<position279 279 "from">)
 140: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 141: (check-for-]-from-word-after #<word "from"> #<position279 279 "from">)
 142: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 143: (scan-next-pos #<position279 279 "from">)
 144: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 145: (check-for-[-from-prior-word #<position279 279 "from"> #<word "came">)
 146: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 147: (check-for-]-from-prior-word #<position279 279 "from"> #<word "came">)
 148: (introduce-right-side-brackets #<word "came"> #<position279 279 "from">)
 149: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 150: (check-edge-fsa-trigger (#<edge157 278 come 279>) #<position278 278 "came"> #<word "came"> #<position279 279 "from">)
 151: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 152: (check-preterminal-edges (#<edge157 278 come 279>) #<word "came"> #<position278 278 "came"> #<position279 279 "from">)
 153: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 154: (introduce-terminal-edges #<word "came"> #<position278 278 "came"> #<position279 279 "from">)
 155: (let ((position-after (chart-position-after position-before))) ..)
 156: (word-level-actions #<word "came"> #<position278 278 "came">)
 157: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 158: (cwlft-cont #<word "came"> #<position278 278 "came">)
 159: (let ((#:g357790 (pos-capitalization position-before))) ..)
 160: (check-word-level-fsa-trigger #<word "came"> #<position278 278 "came">)
 161: (check-for/initiate-scan-patterns #<word "came"> #<position278 278 "came">)
 162: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 163: (check-for-[-from-word-after #<word "came"> #<position278 278 "came">)
 164: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 165: (check-for-]-from-word-after #<word "came"> #<position278 278 "came">)
 166: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 167: (scan-next-pos #<position278 278 "came">)
 168: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 169: (check-for-[-from-prior-word #<position278 278 "came"> #<word "hypothesis">)
 170: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 171: (check-for-]-from-prior-word #<position278 278 "came"> #<word "hypothesis">)
 172: (introduce-right-side-brackets #<word "hypothesis"> #<position278 278 "came">)
 173: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 174: (introduce-terminal-edges #<word "hypothesis"> #<position277 277 "hypothesis"> #<position278 278 "came">)
 175: (let ((position-after (chart-position-after position-before))) ..)
 176: (word-level-actions #<word "hypothesis"> #<position277 277 "hypothesis">)
 177: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 178: (cwlft-cont #<word "hypothesis"> #<position277 277 "hypothesis">)
 179: (let ((#:g357771 (pos-capitalization position-before))) ..)
 180: (check-word-level-fsa-trigger #<word "hypothesis"> #<position277 277 "hypothesis">)
 181: (check-for/initiate-scan-patterns #<word "hypothesis"> #<position277 277 "hypothesis">)
 182: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 183: (check-for-[-from-word-after #<word "hypothesis"> #<position277 277 "hypothesis">)
 184: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 185: (check-for-]-from-word-after #<word "hypothesis"> #<position277 277 "hypothesis">)
 186: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 187: (scan-next-pos #<position277 277 "hypothesis">)
 188: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 189: (check-for-[-from-prior-word #<position277 277 "hypothesis"> #<word "this">)
 190: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 191: (check-for-]-from-prior-word #<position277 277 "hypothesis"> #<word "this">)
 192: (introduce-right-side-brackets #<word "this"> #<position277 277 "hypothesis">)
 193: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 194: (check-edge-fsa-trigger (#<edge156 276 "this" 277>) #<position276 276 "this"> #<word "this"> #<position277 277 "hypothesis">)
 195: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 196: (check-preterminal-edges (#<edge156 276 "this" 277>) #<word "this"> #<position276 276 "this"> #<position277 277 "hypothesis">)
 197: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 198: (introduce-terminal-edges #<word "this"> #<position276 276 "this"> #<position277 277 "hypothesis">)
 199: (let ((position-after (chart-position-after position-before))) ..)
 200: (word-level-actions #<word "this"> #<position276 276 "this">)
 201: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 202: (cwlft-cont #<word "this"> #<position276 276 "this">)
 203: (let ((#:g357750 (pos-capitalization position-before))) ..)
 204: (check-word-level-fsa-trigger #<word "this"> #<position276 276 "this">)
 205: (check-for/initiate-scan-patterns #<word "this"> #<position276 276 "this">)
 206: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 207: (check-for-[-from-word-after #<word "this"> #<position276 276 "this">)
 208: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 209: (check-for-]-from-word-after #<word "this"> #<position276 276 "this">)
 210: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 211: (scan-next-pos #<position276 276 "this">)
 212: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 213: (check-for-[-from-prior-word #<position276 276 "this"> #<word "for">)
 214: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 215: (check-for-]-from-prior-word #<position276 276 "this"> #<word "for">)
 216: (introduce-right-side-brackets #<word "for"> #<position276 276 "this">)
 217: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 218: (check-edge-fsa-trigger (#<edge155 275 "for" 276>) #<position275 275 "for"> #<word "for"> #<position276 276 "this">)
 219: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 220: (check-preterminal-edges (#<edge155 275 "for" 276>) #<word "for"> #<position275 275 "for"> #<position276 276 "this">)
 221: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 222: (introduce-terminal-edges #<word "for"> #<position275 275 "for"> #<position276 276 "this">)
 223: (let ((position-after (chart-position-after position-before))) ..)
 224: (word-level-actions #<word "for"> #<position275 275 "for">)
 225: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 226: (cwlft-cont #<word "for"> #<position275 275 "for">)
 227: (let ((#:g357716 (pos-capitalization position-before))) ..)
 228: (check-word-level-fsa-trigger #<word "for"> #<position275 275 "for">)
 229: (check-for/initiate-scan-patterns #<word "for"> #<position275 275 "for">)
 230: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 231: (check-for-[-from-word-after #<word "for"> #<position275 275 "for">)
 232: (scan-next-segment #<position275 275 "for">)
 233: (march-back-from-the-right/segment)
 234: (march-back-from-the-right/segment)
 235: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 236: (check-for-]-from-word-after #<word "for"> #<position275 275 "for">)
 237: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 238: (scan-next-pos #<position275 275 "for">)
 239: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 240: (check-for-[-from-prior-word #<position275 275 "for"> #<word "evidence">)
 241: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 242: (check-for-]-from-prior-word #<position275 275 "for"> #<word "evidence">)
 243: (introduce-right-side-brackets #<word "evidence"> #<position275 275 "for">)
 244: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 245: (introduce-terminal-edges #<word "evidence"> #<position274 274 "evidence"> #<position275 275 "for">)
 246: (let ((position-after (chart-position-after position-before))) ..)
 247: (word-level-actions #<word "evidence"> #<position274 274 "evidence">)
 248: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 249: (cwlft-cont #<word "evidence"> #<position274 274 "evidence">)
 250: (let ((#:g357691 (pos-capitalization position-before))) ..)
 251: (check-word-level-fsa-trigger #<word "evidence"> #<position274 274 "evidence">)
 252: (check-for/initiate-scan-patterns #<word "evidence"> #<position274 274 "evidence">)
 253: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 254: (check-for-[-from-word-after #<word "evidence"> #<position274 274 "evidence">)
 255: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 256: (check-for-]-from-word-after #<word "evidence"> #<position274 274 "evidence">)
 257: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 258: (scan-next-pos #<position274 274 "evidence">)
 259: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 260: (check-for-[-from-prior-word #<position274 274 "evidence"> #<word "strong">)
 261: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 262: (check-for-]-from-prior-word #<position274 274 "evidence"> #<word "strong">)
 263: (introduce-right-side-brackets #<word "strong"> #<position274 274 "evidence">)
 264: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 265: (introduce-terminal-edges #<word "strong"> #<position273 273 "strong"> #<position274 274 "evidence">)
 266: (let ((position-after (chart-position-after position-before))) ..)
 267: (word-level-actions #<word "strong"> #<position273 273 "strong">)
 268: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 269: (cwlft-cont #<word "strong"> #<position273 273 "strong">)
 270: (let ((#:g357672 (pos-capitalization position-before))) ..)
 271: (check-word-level-fsa-trigger #<word "strong"> #<position273 273 "strong">)
 272: (check-for/initiate-scan-patterns #<word "strong"> #<position273 273 "strong">)
 273: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 274: (check-for-[-from-word-after #<word "strong"> #<position273 273 "strong">)
 275: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 276: (check-for-]-from-word-after #<word "strong"> #<position273 273 "strong">)
 277: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 278: (scan-next-pos #<position273 273 "strong">)
 279: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 280: (check-for-[-from-prior-word #<position273 273 "strong"> #<word "first">)
 281: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 282: (check-for-]-from-prior-word #<position273 273 "strong"> #<word "first">)
 283: (introduce-right-side-brackets #<word "first"> #<position273 273 "strong">)
 284: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 285: (check-edge-fsa-trigger (#<edge153 272 ordinal 273>) #<position272 272 "first"> #<word "first"> #<position273 273 "strong">)
 286: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 287: (check-preterminal-edges (#<edge153 272 ordinal 273>) #<word "first"> #<position272 272 "first"> #<position273 273 "strong">)
 288: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 289: (introduce-terminal-edges #<word "first"> #<position272 272 "first"> #<position273 273 "strong">)
 290: (let ((position-after (chart-position-after position-before))) ..)
 291: (word-level-actions #<word "first"> #<position272 272 "first">)
 292: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 293: (cwlft-cont #<word "first"> #<position272 272 "first">)
 294: (let ((#:g357642 (pos-capitalization position-before))) ..)
 295: (check-word-level-fsa-trigger #<word "first"> #<position272 272 "first">)
 296: (check-for/initiate-scan-patterns #<word "first"> #<position272 272 "first">)
 297: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 298: (check-for-[-from-word-after #<word "first"> #<position272 272 "first">)
 299: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 300: (check-for-]-from-word-after #<word "first"> #<position272 272 "first">)
 301: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 302: (scan-next-pos #<position272 272 "first">)
 303: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 304: (check-for-[-from-prior-word #<position272 272 "first"> #<word "the">)
 305: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 306: (check-for-]-from-prior-word #<position272 272 "first"> #<word "the">)
 307: (introduce-right-side-brackets #<word "the"> #<position272 272 "first">)
 308: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 309: (check-edge-fsa-trigger (#<edge152 271 "the" 272>) #<position271 271 "the"> #<word "the"> #<position272 272 "first">)
 310: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 311: (check-preterminal-edges (#<edge152 271 "the" 272>) #<word "the"> #<position271 271 "the"> #<position272 272 "first">)
 312: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 313: (introduce-terminal-edges #<word "the"> #<position271 271 "the"> #<position272 272 "first">)
 314: (let ((position-after (chart-position-after position-before))) ..)
 315: (word-level-actions #<word "the"> #<position271 271 "the">)
 316: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 317: (cwlft-cont #<word "the"> #<position271 271 "the">)
 318: (let ((#:g357621 (pos-capitalization position-before))) ..)
 319: (check-word-level-fsa-trigger #<word "the"> #<position271 271 "the">)
 320: (check-for/initiate-scan-patterns #<word "the"> #<position271 271 "the">)
 321: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 322: (check-for-[-from-word-after #<word "the"> #<position271 271 "the">)
 323: (scan-next-segment #<position271 271 "the">)
 324: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 325: (check-for-]-from-word-after #<word "the"> #<position271 271 "the">)
 326: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 327: (scan-next-pos #<position271 271 "the">)
 328: (check-fsa-edge-for-trailing-brackets #<edge151 269 quantifier-of 271> #<position271 271 "the">)
 329: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 330: (cwlft-cont #<word "some"> #<position269 269 "some">)
 331: (let ((#:g357587 (pos-capitalization position-before))) ..)
 332: (check-word-level-fsa-trigger #<word "some"> #<position269 269 "some">)
 333: (check-for/initiate-scan-patterns #<word "some"> #<position269 269 "some">)
 334: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 335: (check-for-[-from-word-after #<word "some"> #<position269 269 "some">)
 336: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 337: (check-for-]-from-word-after #<word "some"> #<position269 269 "some">)
 338: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 339: (scan-next-pos #<position269 269 "some">)
 340: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 341: (check-for-[-from-prior-word #<position269 269 "some"> #<word period>)
 342: (scan-next-segment #<position269 269 "some">)
 343: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 344: (check-for-]-from-prior-word #<position269 269 "some"> #<word period>)
 345: (introduce-right-side-brackets #<word period> #<position269 269 "some">)
 346: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 347: (check-edge-fsa-trigger (#<edge149 268 period 269>) #<position268 268 "."> #<word period> #<position269 269 "some">)
 348: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 349: (check-preterminal-edges (#<edge149 268 period 269>) #<word period> #<position268 268 "."> #<position269 269 "some">)
 350: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 351: (introduce-terminal-edges #<word period> #<position268 268 "."> #<position269 269 "some">)
 352: (let ((position-after (chart-position-after position-before))) ..)
 353: (word-level-actions #<word period> #<position268 268 ".">)
 354: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 355: (cwlft-cont #<word period> #<position268 268 ".">)
 356: (let ((#:g357552 (pos-capitalization position-before))) ..)
 357: (check-word-level-fsa-trigger #<word period> #<position268 268 ".">)
 358: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 359: (check-for/initiate-scan-patterns #<word period> #<position268 268 ".">)
 360: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 361: (check-for-[-from-word-after #<word period> #<position268 268 ".">)
 362: (scan-next-segment #<position268 268 ".">)
 363: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 364: (check-for-]-from-word-after #<word period> #<position268 268 ".">)
 365: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 366: (scan-next-pos #<position268 268 ".">)
 367: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 368: (check-for-[-from-prior-word #<position268 268 "."> #<word "cytoplasm">)
 369: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 370: (check-for-]-from-prior-word #<position268 268 "."> #<word "cytoplasm">)
 371: (introduce-right-side-brackets #<word "cytoplasm"> #<position268 268 ".">)
 372: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 373: (introduce-terminal-edges #<word "cytoplasm"> #<position267 267 "cytoplasm"> #<position268 268 ".">)
 374: (let ((position-after (chart-position-after position-before))) ..)
 375: (word-level-actions #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 376: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 377: (cwlft-cont #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 378: (let ((#:g357524 (pos-capitalization position-before))) ..)
 379: (check-word-level-fsa-trigger #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 380: (check-for/initiate-scan-patterns #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 381: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 382: (check-for-[-from-word-after #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 383: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 384: (check-for-]-from-word-after #<word "cytoplasm"> #<position267 267 "cytoplasm">)
 385: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 386: (scan-next-pos #<position267 267 "cytoplasm">)
 387: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 388: (check-for-[-from-prior-word #<position267 267 "cytoplasm"> #<word "the">)
 389: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 390: (check-for-]-from-prior-word #<position267 267 "cytoplasm"> #<word "the">)
 391: (introduce-right-side-brackets #<word "the"> #<position267 267 "cytoplasm">)
 392: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 393: (check-edge-fsa-trigger (#<edge148 266 "the" 267>) #<position266 266 "the"> #<word "the"> #<position267 267 "cytoplasm">)
 394: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 395: (check-preterminal-edges (#<edge148 266 "the" 267>) #<word "the"> #<position266 266 "the"> #<position267 267 "cytoplasm">)
 396: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 397: (introduce-terminal-edges #<word "the"> #<position266 266 "the"> #<position267 267 "cytoplasm">)
 398: (let ((position-after (chart-position-after position-before))) ..)
 399: (word-level-actions #<word "the"> #<position266 266 "the">)
 400: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 401: (cwlft-cont #<word "the"> #<position266 266 "the">)
 402: (let ((#:g357503 (pos-capitalization position-before))) ..)
 403: (check-word-level-fsa-trigger #<word "the"> #<position266 266 "the">)
 404: (check-for/initiate-scan-patterns #<word "the"> #<position266 266 "the">)
 405: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 406: (check-for-[-from-word-after #<word "the"> #<position266 266 "the">)
 407: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 408: (check-for-]-from-word-after #<word "the"> #<position266 266 "the">)
 409: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 410: (scan-next-pos #<position266 266 "the">)
 411: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 412: (check-for-[-from-prior-word #<position266 266 "the"> #<word "in">)
 413: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 414: (check-for-]-from-prior-word #<position266 266 "the"> #<word "in">)
 415: (introduce-right-side-brackets #<word "in"> #<position266 266 "the">)
 416: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 417: (check-edge-fsa-trigger (#<edge146 265 "in" 266> #<edge147 265 spatial-orientation 266>) #<position265 265 "in"> #<word "in"> #<position266 266 "the">)
 418: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 419: (check-preterminal-edges (#<edge146 265 "in" 266> #<edge147 265 spatial-orientation 266>) #<word "in"> #<position265 265 "in"> #<position266 266 "the">)
 420: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 421: (introduce-terminal-edges #<word "in"> #<position265 265 "in"> #<position266 266 "the">)
 422: (let ((position-after (chart-position-after position-before))) ..)
 423: (word-level-actions #<word "in"> #<position265 265 "in">)
 424: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 425: (cwlft-cont #<word "in"> #<position265 265 "in">)
 426: (let ((#:g357467 (pos-capitalization position-before))) ..)
 427: (check-word-level-fsa-trigger #<word "in"> #<position265 265 "in">)
 428: (check-for/initiate-scan-patterns #<word "in"> #<position265 265 "in">)
 429: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 430: (check-for-[-from-word-after #<word "in"> #<position265 265 "in">)
 431: (scan-next-segment #<position265 265 "in">)
 432: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 433: (check-for-]-from-word-after #<word "in"> #<position265 265 "in">)
 434: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 435: (scan-next-pos #<position265 265 "in">)
 436: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 437: (check-for-[-from-prior-word #<position265 265 "in"> #<word "present">)
 438: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 439: (check-for-]-from-prior-word #<position265 265 "in"> #<word "present">)
 440: (introduce-right-side-brackets #<word "present"> #<position265 265 "in">)
 441: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 442: (introduce-terminal-edges #<word "present"> #<position264 264 "present"> #<position265 265 "in">)
 443: (let ((position-after (chart-position-after position-before))) ..)
 444: (word-level-actions #<word "present"> #<position264 264 "present">)
 445: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 446: (cwlft-cont #<word "present"> #<position264 264 "present">)
 447: (let ((#:g357443 (pos-capitalization position-before))) ..)
 448: (check-word-level-fsa-trigger #<word "present"> #<position264 264 "present">)
 449: (check-for/initiate-scan-patterns #<word "present"> #<position264 264 "present">)
 450: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 451: (check-for-[-from-word-after #<word "present"> #<position264 264 "present">)
 452: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 453: (check-for-]-from-word-after #<word "present"> #<position264 264 "present">)
 454: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 455: (scan-next-pos #<position264 264 "present">)
 456: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 457: (check-for-[-from-prior-word #<position264 264 "present"> #<word "signals">)
 458: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 459: (check-for-]-from-prior-word #<position264 264 "present"> #<word "signals">)
 460: (introduce-right-side-brackets #<word "signals"> #<position264 264 "present">)
 461: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 462: (introduce-terminal-edges #<word "signals"> #<position263 263 "signals"> #<position264 264 "present">)
 463: (let ((position-after (chart-position-after position-before))) ..)
 464: (word-level-actions #<word "signals"> #<position263 263 "signals">)
 465: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 466: (cwlft-cont #<word "signals"> #<position263 263 "signals">)
 467: (let ((#:g357424 (pos-capitalization position-before))) ..)
 468: (check-word-level-fsa-trigger #<word "signals"> #<position263 263 "signals">)
 469: (check-for/initiate-scan-patterns #<word "signals"> #<position263 263 "signals">)
 470: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 471: (check-for-[-from-word-after #<word "signals"> #<position263 263 "signals">)
 472: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 473: (check-for-]-from-word-after #<word "signals"> #<position263 263 "signals">)
 474: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 475: (scan-next-pos #<position263 263 "signals">)
 476: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 477: (check-for-[-from-prior-word #<position263 263 "signals"> #<word "chemical">)
 478: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 479: (check-for-]-from-prior-word #<position263 263 "signals"> #<word "chemical">)
 480: (introduce-right-side-brackets #<word "chemical"> #<position263 263 "signals">)
 481: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 482: (introduce-terminal-edges #<word "chemical"> #<position262 262 "chemical"> #<position263 263 "signals">)
 483: (let ((position-after (chart-position-after position-before))) ..)
 484: (word-level-actions #<word "chemical"> #<position262 262 "chemical">)
 485: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 486: (cwlft-cont #<word "chemical"> #<position262 262 "chemical">)
 487: (let ((#:g357405 (pos-capitalization position-before))) ..)
 488: (check-word-level-fsa-trigger #<word "chemical"> #<position262 262 "chemical">)
 489: (check-for/initiate-scan-patterns #<word "chemical"> #<position262 262 "chemical">)
 490: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 491: (check-for-[-from-word-after #<word "chemical"> #<position262 262 "chemical">)
 492: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 493: (check-for-]-from-word-after #<word "chemical"> #<position262 262 "chemical">)
 494: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 495: (scan-next-pos #<position262 262 "chemical">)
 496: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 497: (check-for-[-from-prior-word #<position262 262 "chemical"> #<word "specific">)
 498: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 499: (check-for-]-from-prior-word #<position262 262 "chemical"> #<word "specific">)
 500: (introduce-right-side-brackets #<word "specific"> #<position262 262 "chemical">)
 501: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 502: (introduce-terminal-edges #<word "specific"> #<position261 261 "specific"> #<position262 262 "chemical">)
 503: (let ((position-after (chart-position-after position-before))) ..)
 504: (word-level-actions #<word "specific"> #<position261 261 "specific">)
 505: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 506: (cwlft-cont #<word "specific"> #<position261 261 "specific">)
 507: (let ((#:g357386 (pos-capitalization position-before))) ..)
 508: (check-word-level-fsa-trigger #<word "specific"> #<position261 261 "specific">)
 509: (check-for/initiate-scan-patterns #<word "specific"> #<position261 261 "specific">)
 510: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 511: (check-for-[-from-word-after #<word "specific"> #<position261 261 "specific">)
 512: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 513: (check-for-]-from-word-after #<word "specific"> #<position261 261 "specific">)
 514: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 515: (scan-next-pos #<position261 261 "specific">)
 516: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 517: (check-for-[-from-prior-word #<position261 261 "specific"> #<word "by">)
 518: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 519: (check-for-]-from-prior-word #<position261 261 "specific"> #<word "by">)
 520: (introduce-right-side-brackets #<word "by"> #<position261 261 "specific">)
 521: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 522: (check-edge-fsa-trigger (#<edge144 260 "by" 261> #<edge145 260 spatial-orientation 261>) #<position260 260 "by"> #<word "by"> #<position261 261 "specific">)
 523: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 524: (check-preterminal-edges (#<edge144 260 "by" 261> #<edge145 260 spatial-orientation 261>) #<word "by"> #<position260 260 "by"> #<position261 261 "specific">)
 525: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 526: (introduce-terminal-edges #<word "by"> #<position260 260 "by"> #<position261 261 "specific">)
 527: (let ((position-after (chart-position-after position-before))) ..)
 528: (word-level-actions #<word "by"> #<position260 260 "by">)
 529: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 530: (cwlft-cont #<word "by"> #<position260 260 "by">)
 531: (let ((#:g357354 (pos-capitalization position-before))) ..)
 532: (check-word-level-fsa-trigger #<word "by"> #<position260 260 "by">)
 533: (check-for/initiate-scan-patterns #<word "by"> #<position260 260 "by">)
 534: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 535: (check-for-[-from-word-after #<word "by"> #<position260 260 "by">)
 536: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 537: (check-for-]-from-word-after #<word "by"> #<position260 260 "by">)
 538: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 539: (scan-next-pos #<position260 260 "by">)
 540: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 541: (check-for-[-from-prior-word #<position260 260 "by"> #<word "driven">)
 542: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 543: (check-for-]-from-prior-word #<position260 260 "by"> #<word "driven">)
 544: (introduce-right-side-brackets #<word "driven"> #<position260 260 "by">)
 545: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 546: (introduce-terminal-edges #<word "driven"> #<position259 259 "driven"> #<position260 260 "by">)
 547: (let ((position-after (chart-position-after position-before))) ..)
 548: (word-level-actions #<word "driven"> #<position259 259 "driven">)
 549: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 550: (cwlft-cont #<word "driven"> #<position259 259 "driven">)
 551: (let ((#:g357331 (pos-capitalization position-before))) ..)
 552: (check-word-level-fsa-trigger #<word "driven"> #<position259 259 "driven">)
 553: (check-for/initiate-scan-patterns #<word "driven"> #<position259 259 "driven">)
 554: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 555: (check-for-[-from-word-after #<word "driven"> #<position259 259 "driven">)
 556: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 557: (check-for-]-from-word-after #<word "driven"> #<position259 259 "driven">)
 558: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 559: (scan-next-pos #<position259 259 "driven">)
 560: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 561: (check-for-[-from-prior-word #<position259 259 "driven"> #<word "is">)
 562: (scan-next-segment #<position259 259 "driven">)
 563: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 564: (check-for-]-from-prior-word #<position259 259 "driven"> #<word "is">)
 565: (introduce-right-side-brackets #<word "is"> #<position259 259 "driven">)
 566: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 567: (check-edge-fsa-trigger (#<edge142 258 "is" 259> #<edge143 258 be 259>) #<position258 258 "is"> #<word "is"> #<position259 259 "driven">)
 568: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 569: (check-preterminal-edges (#<edge142 258 "is" 259> #<edge143 258 be 259>) #<word "is"> #<position258 258 "is"> #<position259 259 "driven">)
 570: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 571: (introduce-terminal-edges #<word "is"> #<position258 258 "is"> #<position259 259 "driven">)
 572: (let ((position-after (chart-position-after position-before))) ..)
 573: (word-level-actions #<word "is"> #<position258 258 "is">)
 574: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 575: (cwlft-cont #<word "is"> #<position258 258 "is">)
 576: (let ((#:g357299 (pos-capitalization position-before))) ..)
 577: (check-word-level-fsa-trigger #<word "is"> #<position258 258 "is">)
 578: (check-for/initiate-scan-patterns #<word "is"> #<position258 258 "is">)
 579: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 580: (check-for-[-from-word-after #<word "is"> #<position258 258 "is">)
 581: (scan-next-segment #<position258 258 "is">)
 582: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 583: (check-for-]-from-word-after #<word "is"> #<position258 258 "is">)
 584: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 585: (scan-next-pos #<position258 258 "is">)
 586: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 587: (check-for-[-from-prior-word #<position258 258 "is"> #<word "cycle">)
 588: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 589: (check-for-]-from-prior-word #<position258 258 "is"> #<word "cycle">)
 590: (introduce-right-side-brackets #<word "cycle"> #<position258 258 "is">)
 591: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 592: (introduce-terminal-edges #<word "cycle"> #<position257 257 "cycle"> #<position258 258 "is">)
 593: (let ((position-after (chart-position-after position-before))) ..)
 594: (word-level-actions #<word "cycle"> #<position257 257 "cycle">)
 595: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 596: (cwlft-cont #<word "cycle"> #<position257 257 "cycle">)
 597: (let ((#:g357271 (pos-capitalization position-before))) ..)
 598: (check-word-level-fsa-trigger #<word "cycle"> #<position257 257 "cycle">)
 599: (check-for/initiate-scan-patterns #<word "cycle"> #<position257 257 "cycle">)
 600: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 601: (check-for-[-from-word-after #<word "cycle"> #<position257 257 "cycle">)
 602: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 603: (check-for-]-from-word-after #<word "cycle"> #<position257 257 "cycle">)
 604: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 605: (scan-next-pos #<position257 257 "cycle">)
 606: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 607: (check-for-[-from-prior-word #<position257 257 "cycle"> #<word "cell">)
 608: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 609: (check-for-]-from-prior-word #<position257 257 "cycle"> #<word "cell">)
 610: (introduce-right-side-brackets #<word "cell"> #<position257 257 "cycle">)
 611: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 612: (introduce-terminal-edges #<word "cell"> #<position256 256 "cell"> #<position257 257 "cycle">)
 613: (let ((position-after (chart-position-after position-before))) ..)
 614: (word-level-actions #<word "cell"> #<position256 256 "cell">)
 615: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 616: (cwlft-cont #<word "cell"> #<position256 256 "cell">)
 617: (let ((#:g357252 (pos-capitalization position-before))) ..)
 618: (check-word-level-fsa-trigger #<word "cell"> #<position256 256 "cell">)
 619: (check-for/initiate-scan-patterns #<word "cell"> #<position256 256 "cell">)
 620: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 621: (check-for-[-from-word-after #<word "cell"> #<position256 256 "cell">)
 622: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 623: (check-for-]-from-word-after #<word "cell"> #<position256 256 "cell">)
 624: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 625: (scan-next-pos #<position256 256 "cell">)
 626: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 627: (check-for-[-from-prior-word #<position256 256 "cell"> #<word "the">)
 628: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 629: (check-for-]-from-prior-word #<position256 256 "cell"> #<word "the">)
 630: (introduce-right-side-brackets #<word "the"> #<position256 256 "cell">)
 631: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 632: (check-edge-fsa-trigger (#<edge141 255 "the" 256>) #<position255 255 "the"> #<word "the"> #<position256 256 "cell">)
 633: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 634: (check-preterminal-edges (#<edge141 255 "the" 256>) #<word "the"> #<position255 255 "the"> #<position256 256 "cell">)
 635: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 636: (introduce-terminal-edges #<word "the"> #<position255 255 "the"> #<position256 256 "cell">)
 637: (let ((position-after (chart-position-after position-before))) ..)
 638: (word-level-actions #<word "the"> #<position255 255 "the">)
 639: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 640: (cwlft-cont #<word "the"> #<position255 255 "the">)
 641: (let ((#:g357231 (pos-capitalization position-before))) ..)
 642: (check-word-level-fsa-trigger #<word "the"> #<position255 255 "the">)
 643: (check-for/initiate-scan-patterns #<word "the"> #<position255 255 "the">)
 644: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 645: (check-for-[-from-word-after #<word "the"> #<position255 255 "the">)
 646: (scan-next-segment #<position255 255 "the">)
 647: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 648: (check-for-]-from-word-after #<word "the"> #<position255 255 "the">)
 649: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 650: (scan-next-pos #<position255 255 "the">)
 651: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 652: (check-for-[-from-prior-word #<position255 255 "the"> #<word "that">)
 653: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 654: (check-for-]-from-prior-word #<position255 255 "the"> #<word "that">)
 655: (introduce-right-side-brackets #<word "that"> #<position255 255 "the">)
 656: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 657: (check-edge-fsa-trigger (#<edge139 254 "that" 255> #<edge140 254 oblique-pronoun 255>) #<position254 254 "that"> #<word "that"> #<position255 255 "the">)
 658: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 659: (check-preterminal-edges (#<edge139 254 "that" 255> #<edge140 254 oblique-pronoun 255>) #<word "that"> #<position254 254 "that"> #<position255 255 "the">)
 660: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 661: (introduce-terminal-edges #<word "that"> #<position254 254 "that"> #<position255 255 "the">)
 662: (let ((position-after (chart-position-after position-before))) ..)
 663: (word-level-actions #<word "that"> #<position254 254 "that">)
 664: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 665: (cwlft-cont #<word "that"> #<position254 254 "that">)
 666: (let ((#:g357195 (pos-capitalization position-before))) ..)
 667: (check-word-level-fsa-trigger #<word "that"> #<position254 254 "that">)
 668: (check-for/initiate-scan-patterns #<word "that"> #<position254 254 "that">)
 669: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 670: (check-for-[-from-word-after #<word "that"> #<position254 254 "that">)
 671: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 672: (check-for-]-from-word-after #<word "that"> #<position254 254 "that">)
 673: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 674: (scan-next-pos #<position254 254 "that">)
 675: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 676: (check-for-[-from-prior-word #<position254 254 "that"> #<word colon>)
 677: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 678: (check-for-]-from-prior-word #<position254 254 "that"> #<word colon>)
 679: (introduce-right-side-brackets #<word colon> #<position254 254 "that">)
 680: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 681: (check-edge-fsa-trigger (#<edge138 253 colon 254>) #<position253 253 ":"> #<word colon> #<position254 254 "that">)
 682: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 683: (check-preterminal-edges (#<edge138 253 colon 254>) #<word colon> #<position253 253 ":"> #<position254 254 "that">)
 684: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 685: (introduce-terminal-edges #<word colon> #<position253 253 ":"> #<position254 254 "that">)
 686: (let ((position-after (chart-position-after position-before))) ..)
 687: (word-level-actions #<word colon> #<position253 253 ":">)
 688: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 689: (cwlft-cont #<word colon> #<position253 253 ":">)
 690: (let ((#:g357163 (pos-capitalization position-before))) ..)
 691: (check-word-level-fsa-trigger #<word colon> #<position253 253 ":">)
 692: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 693: (check-for/initiate-scan-patterns #<word colon> #<position253 253 ":">)
 694: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 695: (check-for-[-from-word-after #<word colon> #<position253 253 ":">)
 696: (scan-next-segment #<position253 253 ":">)
 697: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 698: (check-for-]-from-word-after #<word colon> #<position253 253 ":">)
 699: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 700: (scan-next-pos #<position253 253 ":">)
 701: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 702: (check-for-[-from-prior-word #<position253 253 ":"> #<word "hypothesis">)
 703: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 704: (check-for-]-from-prior-word #<position253 253 ":"> #<word "hypothesis">)
 705: (introduce-right-side-brackets #<word "hypothesis"> #<position253 253 ":">)
 706: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 707: (introduce-terminal-edges #<word "hypothesis"> #<position252 252 "hypothesis"> #<position253 253 ":">)
 708: (let ((position-after (chart-position-after position-before))) ..)
 709: (word-level-actions #<word "hypothesis"> #<position252 252 "hypothesis">)
 710: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 711: (cwlft-cont #<word "hypothesis"> #<position252 252 "hypothesis">)
 712: (let ((#:g357139 (pos-capitalization position-before))) ..)
 713: (check-word-level-fsa-trigger #<word "hypothesis"> #<position252 252 "hypothesis">)
 714: (check-for/initiate-scan-patterns #<word "hypothesis"> #<position252 252 "hypothesis">)
 715: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 716: (check-for-[-from-word-after #<word "hypothesis"> #<position252 252 "hypothesis">)
 717: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 718: (check-for-]-from-word-after #<word "hypothesis"> #<position252 252 "hypothesis">)
 719: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 720: (scan-next-pos #<position252 252 "hypothesis">)
 721: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 722: (check-for-[-from-prior-word #<position252 252 "hypothesis"> #<word "alternative">)
 723: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 724: (check-for-]-from-prior-word #<position252 252 "hypothesis"> #<word "alternative">)
 725: (introduce-right-side-brackets #<word "alternative"> #<position252 252 "hypothesis">)
 726: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 727: (introduce-terminal-edges #<word "alternative"> #<position251 251 "alternative"> #<position252 252 "hypothesis">)
 728: (let ((position-after (chart-position-after position-before))) ..)
 729: (word-level-actions #<word "alternative"> #<position251 251 "alternative">)
 730: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 731: (cwlft-cont #<word "alternative"> #<position251 251 "alternative">)
 732: (let ((#:g357120 (pos-capitalization position-before))) ..)
 733: (check-word-level-fsa-trigger #<word "alternative"> #<position251 251 "alternative">)
 734: (check-for/initiate-scan-patterns #<word "alternative"> #<position251 251 "alternative">)
 735: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 736: (check-for-[-from-word-after #<word "alternative"> #<position251 251 "alternative">)
 737: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 738: (check-for-]-from-word-after #<word "alternative"> #<position251 251 "alternative">)
 739: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 740: (scan-next-pos #<position251 251 "alternative">)
 741: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 742: (check-for-[-from-prior-word #<position251 251 "alternative"> #<word "an">)
 743: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 744: (check-for-]-from-prior-word #<position251 251 "alternative"> #<word "an">)
 745: (introduce-right-side-brackets #<word "an"> #<position251 251 "alternative">)
 746: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 747: (check-edge-fsa-trigger (#<edge137 250 "an" 251>) #<position250 250 "an"> #<word "an"> #<position251 251 "alternative">)
 748: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 749: (check-preterminal-edges (#<edge137 250 "an" 251>) #<word "an"> #<position250 250 "an"> #<position251 251 "alternative">)
 750: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 751: (introduce-terminal-edges #<word "an"> #<position250 250 "an"> #<position251 251 "alternative">)
 752: (let ((position-after (chart-position-after position-before))) ..)
 753: (word-level-actions #<word "an"> #<position250 250 "an">)
 754: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 755: (cwlft-cont #<word "an"> #<position250 250 "an">)
 756: (let ((#:g357099 (pos-capitalization position-before))) ..)
 757: (check-word-level-fsa-trigger #<word "an"> #<position250 250 "an">)
 758: (check-for/initiate-scan-patterns #<word "an"> #<position250 250 "an">)
 759: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 760: (check-for-[-from-word-after #<word "an"> #<position250 250 "an">)
 761: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 762: (check-for-]-from-word-after #<word "an"> #<position250 250 "an">)
 763: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 764: (scan-next-pos #<position250 250 "an">)
 765: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 766: (check-for-[-from-prior-word #<position250 250 "an"> #<word "suggested">)
 767: (scan-next-segment #<position250 250 "an">)
 768: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 769: (check-for-]-from-prior-word #<position250 250 "an"> #<word "suggested">)
 770: (introduce-right-side-brackets #<word "suggested"> #<position250 250 "an">)
 771: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 772: (introduce-terminal-edges #<word "suggested"> #<position249 249 "suggested"> #<position250 250 "an">)
 773: (let ((position-after (chart-position-after position-before))) ..)
 774: (word-level-actions #<word "suggested"> #<position249 249 "suggested">)
 775: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 776: (cwlft-cont #<word "suggested"> #<position249 249 "suggested">)
 777: (let ((#:g357066 (pos-capitalization position-before))) ..)
 778: (check-word-level-fsa-trigger #<word "suggested"> #<position249 249 "suggested">)
 779: (check-for/initiate-scan-patterns #<word "suggested"> #<position249 249 "suggested">)
 780: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 781: (check-for-[-from-word-after #<word "suggested"> #<position249 249 "suggested">)
 782: (scan-next-segment #<position249 249 "suggested">)
 783: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 784: (check-for-]-from-word-after #<word "suggested"> #<position249 249 "suggested">)
 785: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 786: (scan-next-pos #<position249 249 "suggested">)
 787: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 788: (check-for-[-from-prior-word #<position249 249 "suggested"> #<word "experiments">)
 789: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 790: (check-for-]-from-prior-word #<position249 249 "suggested"> #<word "experiments">)
 791: (introduce-right-side-brackets #<word "experiments"> #<position249 249 "suggested">)
 792: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 793: (introduce-terminal-edges #<word "experiments"> #<position248 248 "experiments"> #<position249 249 "suggested">)
 794: (let ((position-after (chart-position-after position-before))) ..)
 795: (word-level-actions #<word "experiments"> #<position248 248 "experiments">)
 796: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 797: (cwlft-cont #<word "experiments"> #<position248 248 "experiments">)
 798: (let ((#:g357038 (pos-capitalization position-before))) ..)
 799: (check-word-level-fsa-trigger #<word "experiments"> #<position248 248 "experiments">)
 800: (check-for/initiate-scan-patterns #<word "experiments"> #<position248 248 "experiments">)
 801: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 802: (check-for-[-from-word-after #<word "experiments"> #<position248 248 "experiments">)
 803: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 804: (check-for-]-from-word-after #<word "experiments"> #<position248 248 "experiments">)
 805: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 806: (scan-next-pos #<position248 248 "experiments">)
 807: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 808: (check-for-[-from-prior-word #<position248 248 "experiments"> #<word "of">)
 809: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 810: (check-for-]-from-prior-word #<position248 248 "experiments"> #<word "of">)
 811: (introduce-right-side-brackets #<word "of"> #<position248 248 "experiments">)
 812: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 813: (check-edge-fsa-trigger (#<edge136 247 "of" 248>) #<position247 247 "of"> #<word "of"> #<position248 248 "experiments">)
 814: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 815: (check-preterminal-edges (#<edge136 247 "of" 248>) #<word "of"> #<position247 247 "of"> #<position248 248 "experiments">)
 816: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 817: (introduce-terminal-edges #<word "of"> #<position247 247 "of"> #<position248 248 "experiments">)
 818: (let ((position-after (chart-position-after position-before))) ..)
 819: (word-level-actions #<word "of"> #<position247 247 "of">)
 820: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 821: (cwlft-cont #<word "of"> #<position247 247 "of">)
 822: (let ((#:g357009 (pos-capitalization position-before))) ..)
 823: (check-word-level-fsa-trigger #<word "of"> #<position247 247 "of">)
 824: (check-for/initiate-scan-patterns #<word "of"> #<position247 247 "of">)
 825: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 826: (check-for-[-from-word-after #<word "of"> #<position247 247 "of">)
 827: (scan-next-segment #<position247 247 "of">)
 828: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 829: (check-for-]-from-word-after #<word "of"> #<position247 247 "of">)
 830: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 831: (scan-next-pos #<position247 247 "of">)
 832: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 833: (check-for-[-from-prior-word #<position247 247 "of"> #<word "variety">)
 834: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 835: (check-for-]-from-prior-word #<position247 247 "of"> #<word "variety">)
 836: (introduce-right-side-brackets #<word "variety"> #<position247 247 "of">)
 837: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 838: (introduce-terminal-edges #<word "variety"> #<position246 246 "variety"> #<position247 247 "of">)
 839: (let ((position-after (chart-position-after position-before))) ..)
 840: (word-level-actions #<word "variety"> #<position246 246 "variety">)
 841: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 842: (cwlft-cont #<word "variety"> #<position246 246 "variety">)
 843: (let ((#:g356985 (pos-capitalization position-before))) ..)
 844: (check-word-level-fsa-trigger #<word "variety"> #<position246 246 "variety">)
 845: (check-for/initiate-scan-patterns #<word "variety"> #<position246 246 "variety">)
 846: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 847: (check-for-[-from-word-after #<word "variety"> #<position246 246 "variety">)
 848: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 849: (check-for-]-from-word-after #<word "variety"> #<position246 246 "variety">)
 850: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 851: (scan-next-pos #<position246 246 "variety">)
 852: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 853: (check-for-[-from-prior-word #<position246 246 "variety"> #<word "a">)
 854: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 855: (check-for-]-from-prior-word #<position246 246 "variety"> #<word "a">)
 856: (introduce-right-side-brackets #<word "a"> #<position246 246 "variety">)
 857: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 858: (check-edge-fsa-trigger (#<edge135 245 "a" 246>) #<position245 245 "a"> #<word "a"> #<position246 246 "variety">)
 859: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 860: (check-preterminal-edges (#<edge135 245 "a" 246>) #<word "a"> #<position245 245 "a"> #<position246 246 "variety">)
 861: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 862: (introduce-terminal-edges #<word "a"> #<position245 245 "a"> #<position246 246 "variety">)
 863: (let ((position-after (chart-position-after position-before))) ..)
 864: (word-level-actions #<word "a"> #<position245 245 "a">)
 865: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 866: (cwlft-cont #<word "a"> #<position245 245 "a">)
 867: (let ((#:g356964 (pos-capitalization position-before))) ..)
 868: (check-word-level-fsa-trigger #<word "a"> #<position245 245 "a">)
 869: (check-for/initiate-scan-patterns #<word "a"> #<position245 245 "a">)
 870: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 871: (check-for-[-from-word-after #<word "a"> #<position245 245 "a">)
 872: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 873: (check-for-]-from-word-after #<word "a"> #<position245 245 "a">)
 874: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 875: (scan-next-pos #<position245 245 "a">)
 876: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 877: (check-for-[-from-prior-word #<position245 245 "a"> #<word comma>)
 878: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 879: (check-for-]-from-prior-word #<position245 245 "a"> #<word comma>)
 880: (introduce-right-side-brackets #<word comma> #<position245 245 "a">)
 881: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 882: (check-edge-fsa-trigger (#<edge134 244 comma 245>) #<position244 244 ","> #<word comma> #<position245 245 "a">)
 883: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 884: (check-preterminal-edges (#<edge134 244 comma 245>) #<word comma> #<position244 244 ","> #<position245 245 "a">)
 885: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 886: (introduce-terminal-edges #<word comma> #<position244 244 ","> #<position245 245 "a">)
 887: (let ((position-after (chart-position-after position-before))) ..)
 888: (word-level-actions #<word comma> #<position244 244 ",">)
 889: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 890: (cwlft-cont #<word comma> #<position244 244 ",">)
 891: (let ((#:g356932 (pos-capitalization position-before))) ..)
 892: (check-word-level-fsa-trigger #<word comma> #<position244 244 ",">)
 893: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 894: (check-for/initiate-scan-patterns #<word comma> #<position244 244 ",">)
 895: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 896: (check-for-[-from-word-after #<word comma> #<position244 244 ",">)
 897: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 898: (check-for-]-from-word-after #<word comma> #<position244 244 ",">)
 899: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 900: (scan-next-pos #<position244 244 ",">)
 901: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 902: (check-for-[-from-prior-word #<position244 244 ","> #<word "s">)
 903: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 904: (check-for-]-from-prior-word #<position244 244 ","> #<word "s">)
 905: (introduce-right-side-brackets #<word "s"> #<position244 244 ",">)
 906: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 907: (check-edge-fsa-trigger (#<edge133 243 "s" 244>) #<position243 243 "s"> #<word "s"> #<position244 244 ",">)
 908: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 909: (check-preterminal-edges (#<edge133 243 "s" 244>) #<word "s"> #<position243 243 "s"> #<position244 244 ",">)
 910: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 911: (introduce-terminal-edges #<word "s"> #<position243 243 "s"> #<position244 244 ",">)
 912: (let ((position-after (chart-position-after position-before))) ..)
 913: (word-level-actions #<word "s"> #<position243 243 "s">)
 914: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 915: (cwlft-cont #<word "s"> #<position243 243 "s">)
 916: (let ((#:g356907 (pos-capitalization position-before))) ..)
 917: (check-word-level-fsa-trigger #<word "s"> #<position243 243 "s">)
 918: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 919: (check-for/initiate-scan-patterns #<word "s"> #<position243 243 "s">)
 920: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 921: (check-for-[-from-word-after #<word "s"> #<position243 243 "s">)
 922: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 923: (check-for-]-from-word-after #<word "s"> #<position243 243 "s">)
 924: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 925: (scan-next-pos #<position243 243 "s">)
 926: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 927: (check-for-[-from-prior-word #<position243 243 "s"> #<word "1970">)
 928: (scan-next-segment #<position243 243 "s">)
 929: (march-back-from-the-right/segment)
 930: (march-back-from-the-right/segment)
 931: (march-back-from-the-right/segment)
 932: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 933: (check-for-]-from-prior-word #<position243 243 "s"> #<word "1970">)
 934: (introduce-right-side-brackets #<word "1970"> #<position243 243 "s">)
 935: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 936: (check-edge-fsa-trigger (#<edge132 242 year 243>) #<position242 242 "1970"> #<word "1970"> #<position243 243 "s">)
 937: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 938: (check-preterminal-edges (#<edge132 242 year 243>) #<word "1970"> #<position242 242 "1970"> #<position243 243 "s">)
 939: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 940: (introduce-terminal-edges #<word "1970"> #<position242 242 "1970"> #<position243 243 "s">)
 941: (let ((position-after (chart-position-after position-before))) ..)
 942: (word-level-actions #<word "1970"> #<position242 242 "1970">)
 943: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 944: (cwlft-cont #<word "1970"> #<position242 242 "1970">)
 945: (let ((#:g356872 (pos-capitalization position-before))) ..)
 946: (check-word-level-fsa-trigger #<word "1970"> #<position242 242 "1970">)
 947: (check-for/initiate-scan-patterns #<word "1970"> #<position242 242 "1970">)
 948: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 949: (check-for-[-from-word-after #<word "1970"> #<position242 242 "1970">)
 950: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 951: (check-for-]-from-word-after #<word "1970"> #<position242 242 "1970">)
 952: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 953: (scan-next-pos #<position242 242 "1970">)
 954: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 955: (check-for-[-from-prior-word #<position242 242 "1970"> #<word "early">)
 956: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 957: (check-for-]-from-prior-word #<position242 242 "1970"> #<word "early">)
 958: (introduce-right-side-brackets #<word "early"> #<position242 242 "1970">)
 959: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 960: (check-edge-fsa-trigger (#<edge131 241 phase-offset 242>) #<position241 241 "early"> #<word "early"> #<position242 242 "1970">)
 961: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 962: (check-preterminal-edges (#<edge131 241 phase-offset 242>) #<word "early"> #<position241 241 "early"> #<position242 242 "1970">)
 963: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 964: (introduce-terminal-edges #<word "early"> #<position241 241 "early"> #<position242 242 "1970">)
 965: (let ((position-after (chart-position-after position-before))) ..)
 966: (word-level-actions #<word "early"> #<position241 241 "early">)
 967: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 968: (cwlft-cont #<word "early"> #<position241 241 "early">)
 969: (let ((#:g356847 (pos-capitalization position-before))) ..)
 970: (check-word-level-fsa-trigger #<word "early"> #<position241 241 "early">)
 971: (check-for/initiate-scan-patterns #<word "early"> #<position241 241 "early">)
 972: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 973: (check-for-[-from-word-after #<word "early"> #<position241 241 "early">)
 974: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 975: (check-for-]-from-word-after #<word "early"> #<position241 241 "early">)
 976: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 977: (scan-next-pos #<position241 241 "early">)
 978: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 979: (check-for-[-from-prior-word #<position241 241 "early"> #<word "the">)
 980: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 981: (check-for-]-from-prior-word #<position241 241 "early"> #<word "the">)
 982: (introduce-right-side-brackets #<word "the"> #<position241 241 "early">)
 983: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 984: (check-edge-fsa-trigger (#<edge130 240 "the" 241>) #<position240 240 "the"> #<word "the"> #<position241 241 "early">)
 985: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 986: (check-preterminal-edges (#<edge130 240 "the" 241>) #<word "the"> #<position240 240 "the"> #<position241 241 "early">)
 987: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 988: (introduce-terminal-edges #<word "the"> #<position240 240 "the"> #<position241 241 "early">)
 989: (let ((position-after (chart-position-after position-before))) ..)
 990: (word-level-actions #<word "the"> #<position240 240 "the">)
 991: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 992: (cwlft-cont #<word "the"> #<position240 240 "the">)
 993: (let ((#:g356826 (pos-capitalization position-before))) ..)
 994: (check-word-level-fsa-trigger #<word "the"> #<position240 240 "the">)
 995: (check-for/initiate-scan-patterns #<word "the"> #<position240 240 "the">)
 996: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 997: (check-for-[-from-word-after #<word "the"> #<position240 240 "the">)
 998: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 999: (check-for-]-from-word-after #<word "the"> #<position240 240 "the">)
 1000: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1001: (scan-next-pos #<position240 240 "the">)
 1002: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1003: (check-for-[-from-prior-word #<position240 240 "the"> #<word "in">)
 1004: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1005: (check-for-]-from-prior-word #<position240 240 "the"> #<word "in">)
 1006: (introduce-right-side-brackets #<word "in"> #<position240 240 "the">)
 1007: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1008: (check-edge-fsa-trigger (#<edge128 239 "in" 240> #<edge129 239 spatial-orientation 240>) #<position239 239 "in"> #<word "in"> #<position240 240 "the">)
 1009: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1010: (check-preterminal-edges (#<edge128 239 "in" 240> #<edge129 239 spatial-orientation 240>) #<word "in"> #<position239 239 "in"> #<position240 240 "the">)
 1011: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1012: (introduce-terminal-edges #<word "in"> #<position239 239 "in"> #<position240 240 "the">)
 1013: (let ((position-after (chart-position-after position-before))) ..)
 1014: (word-level-actions #<word "in"> #<position239 239 "in">)
 1015: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1016: (cwlft-cont #<word "in"> #<position239 239 "in">)
 1017: (let ((#:g356788 (pos-capitalization position-before))) ..)
 1018: (check-word-level-fsa-trigger #<word "in"> #<position239 239 "in">)
 1019: (check-for/initiate-scan-patterns #<word "in"> #<position239 239 "in">)
 1020: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1021: (check-for-[-from-word-after #<word "in"> #<position239 239 "in">)
 1022: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1023: (check-for-]-from-word-after #<word "in"> #<position239 239 "in">)
 1024: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1025: (scan-next-pos #<position239 239 "in">)
 1026: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1027: (check-for-[-from-prior-word #<position239 239 "in"> #<word period>)
 1028: (scan-next-segment #<position239 239 "in">)
 1029: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1030: (check-for-]-from-prior-word #<position239 239 "in"> #<word period>)
 1031: (introduce-right-side-brackets #<word period> #<position239 239 "in">)
 1032: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1033: (check-edge-fsa-trigger (#<edge127 238 period 239>) #<position238 238 "."> #<word period> #<position239 239 "in">)
 1034: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1035: (check-preterminal-edges (#<edge127 238 period 239>) #<word period> #<position238 238 "."> #<position239 239 "in">)
 1036: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1037: (introduce-terminal-edges #<word period> #<position238 238 "."> #<position239 239 "in">)
 1038: (let ((position-after (chart-position-after position-before))) ..)
 1039: (word-level-actions #<word period> #<position238 238 ".">)
 1040: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1041: (cwlft-cont #<word period> #<position238 238 ".">)
 1042: (let ((#:g356755 (pos-capitalization position-before))) ..)
 1043: (check-word-level-fsa-trigger #<word period> #<position238 238 ".">)
 1044: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 1045: (check-for/initiate-scan-patterns #<word period> #<position238 238 ".">)
 1046: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1047: (check-for-[-from-word-after #<word period> #<position238 238 ".">)
 1048: (scan-next-segment #<position238 238 ".">)
 1049: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1050: (check-for-]-from-word-after #<word period> #<position238 238 ".">)
 1051: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1052: (scan-next-pos #<position238 238 ".">)
 1053: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1054: (check-for-[-from-prior-word #<position238 238 "."> #<word "correct">)
 1055: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1056: (check-for-]-from-prior-word #<position238 238 "."> #<word "correct">)
 1057: (introduce-right-side-brackets #<word "correct"> #<position238 238 ".">)
 1058: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1059: (introduce-terminal-edges #<word "correct"> #<position237 237 "correct"> #<position238 238 ".">)
 1060: (let ((position-after (chart-position-after position-before))) ..)
 1061: (word-level-actions #<word "correct"> #<position237 237 "correct">)
 1062: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1063: (cwlft-cont #<word "correct"> #<position237 237 "correct">)
 1064: (let ((#:g356727 (pos-capitalization position-before))) ..)
 1065: (check-word-level-fsa-trigger #<word "correct"> #<position237 237 "correct">)
 1066: (check-for/initiate-scan-patterns #<word "correct"> #<position237 237 "correct">)
 1067: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1068: (check-for-[-from-word-after #<word "correct"> #<position237 237 "correct">)
 1069: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1070: (check-for-]-from-word-after #<word "correct"> #<position237 237 "correct">)
 1071: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1072: (scan-next-pos #<position237 237 "correct">)
 1073: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1074: (check-for-[-from-prior-word #<position237 237 "correct"> #<word "fact">)
 1075: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1076: (check-for-]-from-prior-word #<position237 237 "correct"> #<word "fact">)
 1077: (introduce-right-side-brackets #<word "fact"> #<position237 237 "correct">)
 1078: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1079: (introduce-terminal-edges #<word "fact"> #<position236 236 "fact"> #<position237 237 "correct">)
 1080: (let ((position-after (chart-position-after position-before))) ..)
 1081: (word-level-actions #<word "fact"> #<position236 236 "fact">)
 1082: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1083: (cwlft-cont #<word "fact"> #<position236 236 "fact">)
 1084: (let ((#:g356708 (pos-capitalization position-before))) ..)
 1085: (check-word-level-fsa-trigger #<word "fact"> #<position236 236 "fact">)
 1086: (check-for/initiate-scan-patterns #<word "fact"> #<position236 236 "fact">)
 1087: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1088: (check-for-[-from-word-after #<word "fact"> #<position236 236 "fact">)
 1089: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1090: (check-for-]-from-word-after #<word "fact"> #<position236 236 "fact">)
 1091: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1092: (scan-next-pos #<position236 236 "fact">)
 1093: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1094: (check-for-[-from-prior-word #<position236 236 "fact"> #<word "in">)
 1095: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1096: (check-for-]-from-prior-word #<position236 236 "fact"> #<word "in">)
 1097: (introduce-right-side-brackets #<word "in"> #<position236 236 "fact">)
 1098: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1099: (check-edge-fsa-trigger (#<edge125 235 "in" 236> #<edge126 235 spatial-orientation 236>) #<position235 235 "in"> #<word "in"> #<position236 236 "fact">)
 1100: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1101: (check-preterminal-edges (#<edge125 235 "in" 236> #<edge126 235 spatial-orientation 236>) #<word "in"> #<position235 235 "in"> #<position236 236 "fact">)
 1102: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1103: (introduce-terminal-edges #<word "in"> #<position235 235 "in"> #<position236 236 "fact">)
 1104: (let ((position-after (chart-position-after position-before))) ..)
 1105: (word-level-actions #<word "in"> #<position235 235 "in">)
 1106: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1107: (cwlft-cont #<word "in"> #<position235 235 "in">)
 1108: (let ((#:g356679 (pos-capitalization position-before))) ..)
 1109: (check-word-level-fsa-trigger #<word "in"> #<position235 235 "in">)
 1110: (check-for/initiate-scan-patterns #<word "in"> #<position235 235 "in">)
 1111: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1112: (check-for-[-from-word-after #<word "in"> #<position235 235 "in">)
 1113: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1114: (check-for-]-from-word-after #<word "in"> #<position235 235 "in">)
 1115: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1116: (scan-next-pos #<position235 235 "in">)
 1117: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1118: (check-for-[-from-prior-word #<position235 235 "in"> #<word "not">)
 1119: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1120: (check-for-]-from-prior-word #<position235 235 "in"> #<word "not">)
 1121: (introduce-right-side-brackets #<word "not"> #<position235 235 "in">)
 1122: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1123: (check-edge-fsa-trigger (#<edge124 234 "not" 235>) #<position234 234 "not"> #<word "not"> #<position235 235 "in">)
 1124: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1125: (check-preterminal-edges (#<edge124 234 "not" 235>) #<word "not"> #<position234 234 "not"> #<position235 235 "in">)
 1126: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1127: (introduce-terminal-edges #<word "not"> #<position234 234 "not"> #<position235 235 "in">)
 1128: (let ((position-after (chart-position-after position-before))) ..)
 1129: (word-level-actions #<word "not"> #<position234 234 "not">)
 1130: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1131: (cwlft-cont #<word "not"> #<position234 234 "not">)
 1132: (let ((#:g356654 (pos-capitalization position-before))) ..)
 1133: (check-word-level-fsa-trigger #<word "not"> #<position234 234 "not">)
 1134: (check-for/initiate-scan-patterns #<word "not"> #<position234 234 "not">)
 1135: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1136: (check-for-[-from-word-after #<word "not"> #<position234 234 "not">)
 1137: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1138: (check-for-]-from-word-after #<word "not"> #<position234 234 "not">)
 1139: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1140: (scan-next-pos #<position234 234 "not">)
 1141: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1142: (check-for-[-from-prior-word #<position234 234 "not"> #<word "is">)
 1143: (scan-next-segment #<position234 234 "not">)
 1144: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1145: (check-for-]-from-prior-word #<position234 234 "not"> #<word "is">)
 1146: (introduce-right-side-brackets #<word "is"> #<position234 234 "not">)
 1147: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1148: (check-edge-fsa-trigger (#<edge122 233 "is" 234> #<edge123 233 be 234>) #<position233 233 "is"> #<word "is"> #<position234 234 "not">)
 1149: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1150: (check-preterminal-edges (#<edge122 233 "is" 234> #<edge123 233 be 234>) #<word "is"> #<position233 233 "is"> #<position234 234 "not">)
 1151: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1152: (introduce-terminal-edges #<word "is"> #<position233 233 "is"> #<position234 234 "not">)
 1153: (let ((position-after (chart-position-after position-before))) ..)
 1154: (word-level-actions #<word "is"> #<position233 233 "is">)
 1155: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1156: (cwlft-cont #<word "is"> #<position233 233 "is">)
 1157: (let ((#:g356620 (pos-capitalization position-before))) ..)
 1158: (check-word-level-fsa-trigger #<word "is"> #<position233 233 "is">)
 1159: (check-for/initiate-scan-patterns #<word "is"> #<position233 233 "is">)
 1160: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1161: (check-for-[-from-word-after #<word "is"> #<position233 233 "is">)
 1162: (scan-next-segment #<position233 233 "is">)
 1163: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1164: (check-for-]-from-word-after #<word "is"> #<position233 233 "is">)
 1165: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1166: (scan-next-pos #<position233 233 "is">)
 1167: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1168: (check-for-[-from-prior-word #<position233 233 "is"> #<word "hypothesis">)
 1169: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1170: (check-for-]-from-prior-word #<position233 233 "is"> #<word "hypothesis">)
 1171: (introduce-right-side-brackets #<word "hypothesis"> #<position233 233 "is">)
 1172: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1173: (introduce-terminal-edges #<word "hypothesis"> #<position232 232 "hypothesis"> #<position233 233 "is">)
 1174: (let ((position-after (chart-position-after position-before))) ..)
 1175: (word-level-actions #<word "hypothesis"> #<position232 232 "hypothesis">)
 1176: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1177: (cwlft-cont #<word "hypothesis"> #<position232 232 "hypothesis">)
 1178: (let ((#:g356592 (pos-capitalization position-before))) ..)
 1179: (check-word-level-fsa-trigger #<word "hypothesis"> #<position232 232 "hypothesis">)
 1180: (check-for/initiate-scan-patterns #<word "hypothesis"> #<position232 232 "hypothesis">)
 1181: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1182: (check-for-[-from-word-after #<word "hypothesis"> #<position232 232 "hypothesis">)
 1183: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1184: (check-for-]-from-word-after #<word "hypothesis"> #<position232 232 "hypothesis">)
 1185: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1186: (scan-next-pos #<position232 232 "hypothesis">)
 1187: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1188: (check-for-[-from-prior-word #<position232 232 "hypothesis"> #<word "logical">)
 1189: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1190: (check-for-]-from-prior-word #<position232 232 "hypothesis"> #<word "logical">)
 1191: (introduce-right-side-brackets #<word "logical"> #<position232 232 "hypothesis">)
 1192: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1193: (introduce-terminal-edges #<word "logical"> #<position231 231 "logical"> #<position232 232 "hypothesis">)
 1194: (let ((position-after (chart-position-after position-before))) ..)
 1195: (word-level-actions #<word "logical"> #<position231 231 "logical">)
 1196: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1197: (cwlft-cont #<word "logical"> #<position231 231 "logical">)
 1198: (let ((#:g356573 (pos-capitalization position-before))) ..)
 1199: (check-word-level-fsa-trigger #<word "logical"> #<position231 231 "logical">)
 1200: (check-for/initiate-scan-patterns #<word "logical"> #<position231 231 "logical">)
 1201: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1202: (check-for-[-from-word-after #<word "logical"> #<position231 231 "logical">)
 1203: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1204: (check-for-]-from-word-after #<word "logical"> #<position231 231 "logical">)
 1205: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1206: (scan-next-pos #<position231 231 "logical">)
 1207: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1208: (check-for-[-from-prior-word #<position231 231 "logical"> #<word "apparently">)
 1209: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1210: (check-for-]-from-prior-word #<position231 231 "logical"> #<word "apparently">)
 1211: (introduce-right-side-brackets #<word "apparently"> #<position231 231 "logical">)
 1212: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1213: (introduce-terminal-edges #<word "apparently"> #<position230 230 "apparently"> #<position231 231 "logical">)
 1214: (let ((position-after (chart-position-after position-before))) ..)
 1215: (word-level-actions #<word "apparently"> #<position230 230 "apparently">)
 1216: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1217: (cwlft-cont #<word "apparently"> #<position230 230 "apparently">)
 1218: (let ((#:g356550 (pos-capitalization position-before))) ..)
 1219: (check-word-level-fsa-trigger #<word "apparently"> #<position230 230 "apparently">)
 1220: (check-for/initiate-scan-patterns #<word "apparently"> #<position230 230 "apparently">)
 1221: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1222: (check-for-[-from-word-after #<word "apparently"> #<position230 230 "apparently">)
 1223: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1224: (check-for-]-from-word-after #<word "apparently"> #<position230 230 "apparently">)
 1225: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1226: (scan-next-pos #<position230 230 "apparently">)
 1227: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1228: (check-for-[-from-prior-word #<position230 230 "apparently"> #<word "this">)
 1229: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1230: (check-for-]-from-prior-word #<position230 230 "apparently"> #<word "this">)
 1231: (introduce-right-side-brackets #<word "this"> #<position230 230 "apparently">)
 1232: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1233: (check-edge-fsa-trigger (#<edge121 229 "this" 230>) #<position229 229 "this"> #<word "this"> #<position230 230 "apparently">)
 1234: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1235: (check-preterminal-edges (#<edge121 229 "this" 230>) #<word "this"> #<position229 229 "this"> #<position230 230 "apparently">)
 1236: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1237: (introduce-terminal-edges #<word "this"> #<position229 229 "this"> #<position230 230 "apparently">)
 1238: (let ((position-after (chart-position-after position-before))) ..)
 1239: (word-level-actions #<word "this"> #<position229 229 "this">)
 1240: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1241: (cwlft-cont #<word "this"> #<position229 229 "this">)
 1242: (let ((#:g356525 (pos-capitalization position-before))) ..)
 1243: (check-word-level-fsa-trigger #<word "this"> #<position229 229 "this">)
 1244: (check-for/initiate-scan-patterns #<word "this"> #<position229 229 "this">)
 1245: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1246: (check-for-[-from-word-after #<word "this"> #<position229 229 "this">)
 1247: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1248: (check-for-]-from-word-after #<word "this"> #<position229 229 "this">)
 1249: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1250: (scan-next-pos #<position229 229 "this">)
 1251: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1252: (check-for-[-from-prior-word #<position229 229 "this"> #<word comma>)
 1253: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1254: (check-for-]-from-prior-word #<position229 229 "this"> #<word comma>)
 1255: (introduce-right-side-brackets #<word comma> #<position229 229 "this">)
 1256: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1257: (check-edge-fsa-trigger (#<edge120 228 comma 229>) #<position228 228 ","> #<word comma> #<position229 229 "this">)
 1258: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1259: (check-preterminal-edges (#<edge120 228 comma 229>) #<word comma> #<position228 228 ","> #<position229 229 "this">)
 1260: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1261: (introduce-terminal-edges #<word comma> #<position228 228 ","> #<position229 229 "this">)
 1262: (let ((position-after (chart-position-after position-before))) ..)
 1263: (word-level-actions #<word comma> #<position228 228 ",">)
 1264: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1265: (cwlft-cont #<word comma> #<position228 228 ",">)
 1266: (let ((#:g356493 (pos-capitalization position-before))) ..)
 1267: (check-word-level-fsa-trigger #<word comma> #<position228 228 ",">)
 1268: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 1269: (check-for/initiate-scan-patterns #<word comma> #<position228 228 ",">)
 1270: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1271: (check-for-[-from-word-after #<word comma> #<position228 228 ",">)
 1272: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1273: (check-for-]-from-word-after #<word comma> #<position228 228 ",">)
 1274: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1275: (scan-next-pos #<position228 228 ",">)
 1276: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1277: (check-for-[-from-prior-word #<position228 228 ","> #<word "however">)
 1278: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1279: (check-for-]-from-prior-word #<position228 228 ","> #<word "however">)
 1280: (introduce-right-side-brackets #<word "however"> #<position228 228 ",">)
 1281: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1282: (introduce-terminal-edges #<word "however"> #<position227 227 "however"> #<position228 228 ",">)
 1283: (let ((position-after (chart-position-after position-before))) ..)
 1284: (word-level-actions #<word "however"> #<position227 227 "however">)
 1285: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1286: (cwlft-cont #<word "however"> #<position227 227 "however">)
 1287: (let ((#:g356463 (pos-capitalization position-before))) ..)
 1288: (check-word-level-fsa-trigger #<word "however"> #<position227 227 "however">)
 1289: (check-for/initiate-scan-patterns #<word "however"> #<position227 227 "however">)
 1290: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1291: (check-for-[-from-word-after #<word "however"> #<position227 227 "however">)
 1292: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1293: (check-for-]-from-word-after #<word "however"> #<position227 227 "however">)
 1294: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1295: (scan-next-pos #<position227 227 "however">)
 1296: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1297: (check-for-[-from-prior-word #<position227 227 "however"> #<word period>)
 1298: (scan-next-segment #<position227 227 "however">)
 1299: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1300: (check-for-]-from-prior-word #<position227 227 "however"> #<word period>)
 1301: (introduce-right-side-brackets #<word period> #<position227 227 "however">)
 1302: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1303: (check-edge-fsa-trigger (#<edge119 226 period 227>) #<position226 226 "."> #<word period> #<position227 227 "however">)
 1304: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1305: (check-preterminal-edges (#<edge119 226 period 227>) #<word period> #<position226 226 "."> #<position227 227 "however">)
 1306: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1307: (introduce-terminal-edges #<word period> #<position226 226 "."> #<position227 227 "however">)
 1308: (let ((position-after (chart-position-after position-before))) ..)
 1309: (word-level-actions #<word period> #<position226 226 ".">)
 1310: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1311: (cwlft-cont #<word period> #<position226 226 ".">)
 1312: (let ((#:g356430 (pos-capitalization position-before))) ..)
 1313: (check-word-level-fsa-trigger #<word period> #<position226 226 ".">)
 1314: (let ((state/s (scan-pattern-starting-pair position-before word))) (if state/s (let (#) (if pos-reached # #)) (check-word-level-fsa-trigger word position-before)))
 1315: (check-for/initiate-scan-patterns #<word period> #<position226 226 ".">)
 1316: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1317: (check-for-[-from-word-after #<word period> #<position226 226 ".">)
 1318: (scan-next-segment #<position226 226 ".">)
 1319: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1320: (check-for-]-from-word-after #<word period> #<position226 226 ".">)
 1321: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1322: (scan-next-pos #<position226 226 ".">)
 1323: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1324: (check-for-[-from-prior-word #<position226 226 "."> #<word "mitosis">)
 1325: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1326: (check-for-]-from-prior-word #<position226 226 "."> #<word "mitosis">)
 1327: (introduce-right-side-brackets #<word "mitosis"> #<position226 226 ".">)
 1328: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1329: (introduce-terminal-edges #<word "mitosis"> #<position225 225 "mitosis"> #<position226 226 ".">)
 1330: (let ((position-after (chart-position-after position-before))) ..)
 1331: (word-level-actions #<word "mitosis"> #<position225 225 "mitosis">)
 1332: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1333: (cwlft-cont #<word "mitosis"> #<position225 225 "mitosis">)
 1334: (let ((#:g356402 (pos-capitalization position-before))) ..)
 1335: (check-word-level-fsa-trigger #<word "mitosis"> #<position225 225 "mitosis">)
 1336: (check-for/initiate-scan-patterns #<word "mitosis"> #<position225 225 "mitosis">)
 1337: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1338: (check-for-[-from-word-after #<word "mitosis"> #<position225 225 "mitosis">)
 1339: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1340: (check-for-]-from-word-after #<word "mitosis"> #<position225 225 "mitosis">)
 1341: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1342: (scan-next-pos #<position225 225 "mitosis">)
 1343: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1344: (check-for-[-from-prior-word #<position225 225 "mitosis"> #<word "of">)
 1345: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1346: (check-for-]-from-prior-word #<position225 225 "mitosis"> #<word "of">)
 1347: (introduce-right-side-brackets #<word "of"> #<position225 225 "mitosis">)
 1348: (let ((position-after-edge-fsa (do-edge-level-fsas edges position-before))) ..)
 1349: (check-edge-fsa-trigger (#<edge118 224 "of" 225>) #<position224 224 "of"> #<word "of"> #<position225 225 "mitosis">)
 1350: (let ((label (introduce-leading-brackets-from-edge-form-labels edges position-before))) ..)
 1351: (check-preterminal-edges (#<edge118 224 "of" 225>) #<word "of"> #<position224 224 "of"> #<position225 225 "mitosis">)
 1352: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1353: (introduce-terminal-edges #<word "of"> #<position224 224 "of"> #<position225 225 "mitosis">)
 1354: (let ((position-after (chart-position-after position-before))) ..)
 1355: (word-level-actions #<word "of"> #<position224 224 "of">)
 1356: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1357: (cwlft-cont #<word "of"> #<position224 224 "of">)
 1358: (let ((#:g356373 (pos-capitalization position-before))) ..)
 1359: (check-word-level-fsa-trigger #<word "of"> #<position224 224 "of">)
 1360: (check-for/initiate-scan-patterns #<word "of"> #<position224 224 "of">)
 1361: (let (([ ([-on-position-because-of-word? position-before word))) ..)
 1362: (check-for-[-from-word-after #<word "of"> #<position224 224 "of">)
 1363: (scan-next-segment #<position224 224 "of">)
 1364: (let ((] (]-on-position-because-of-word? position-before word))) ..)
 1365: (check-for-]-from-word-after #<word "of"> #<position224 224 "of">)
 1366: (let ((word (pos-terminal position))) (introduce-leading-brackets word position) (check-for-]-from-word-after word position))
 1367: (scan-next-pos #<position224 224 "of">)
 1368: (let (([ ([-on-position-because-of-word? position-after prior-word))) ..)
 1369: (check-for-[-from-prior-word #<position224 224 "of"> #<word "onset">)
 1370: (let ((] (]-on-position-because-of-word? position-after prior-word))) ..)
 1371: (check-for-]-from-prior-word #<position224 224 "of"> #<word "onset">)
 1372: (introduce-right-side-brackets #<word "onset"> #<position224 224 "of">)
 1373: (let ((edges (install-terminal-edges word position-before position-after))) ..)
 1374: (introduce-terminal-edges #<word "onset"> #<position223 223 "onset"> #<position224 224 "of">)
 1375: (let ((position-after (chart-position-after position-before))) ..)
 1376: (word-level-actions #<word "onset"> #<position223 223 "onset">)
 1377: (let ((where-fsa-ended (do-word-level-fsas word position-before))) ..)
 1378: (cwlft-cont #<word "onset"> #<position223 223 "onset">)
 1379: (let ((#:g356349 (pos-capitalization position-before))) ..)
 --more--

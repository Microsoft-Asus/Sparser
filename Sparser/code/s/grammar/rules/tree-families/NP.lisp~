;;; -*- Mode:LISP; Syntax:Common-Lisp; Package:SPARSER -*-
;;; copyright (c) 1992-2005 David D. McDonald  -- all rights reserved
;;;
;;;     File:  "NP"
;;;   Module:  "grammar;rules:tree-families:"
;;;  version:  0.4 March 2005

;; initiated 8/31/92 v2.3
;; 0.1 (6/2/93) added explicit definitions for the mix-in category
;; 0.2 (6/12) added definites
;; 0.3 (4/29/94) broke out definites so they could be incorporated by other ETFs
;;  (3/7/95) added 'schema-type' fields
;;  (8/11) added NP-common-noun/indefinite by copying out those cases
;;   from NP-common-noun.  ///This cries out for definiing that one as
;;   the result of two incorporations, but don't have the time to check
;;    whether that would automatically work or need some effort.
;; 0.4 (12/27/99) Added head fields to every rule. (3/16/05) cleaned up
;;  the indenting, added np-common-noun/intrinsically-definite. (3/17) trying
;;  to sort this all out, since it's becoming counterintuitive with "the board"
;;  and now "a <title>".

(in-package :sparser)


(define-mixin-category indefinite)


;;;------------
;;; form rules
;;;------------

(define-exploded-tree-family  soak-up-indefinite-article
  :description "Makes form rules that snarf the article without any ~
                semantic effects."
  :cases
     ((:indefinite (np ("a" np)
                     :head right-edge))
      (:indefinite (np ("an" np)
                     :head right-edge))))



;;;----------------
;;; full paradigms 
;;;----------------

;;--- definite articles

(define-exploded-tree-family  NP-common-noun/intrinsically-definite

#| This is a funny one that has to be considered still very much in flux
 since I'm tuning it to "the board (of directors)" and that's probably quite
 ideosyncratic. In that category, we start with a common-noun rspec to
 get an edge over "board" that links it to the category, then we use
 this schema to soak up the definite article, which is presumed to have
 no semantic import. |#

  :schema-type  :mixin
  :labels ( np n-bar np-head )
  :cases
     ((:definite (np ("the" n-bar)
                   :head right-edge))
      (:definite (np ("this" n-bar)
                   :head right-edge))
      (:definite (np ("that" n-bar)
                   :head right-edge))
      (:definite (np ("the" np-head)
                   :head right-edge))
      (:definite (np ("this" np-head)
                   :head right-edge))
      (:definite (np ("that" np-head)
                   :head right-edge))))



(define-exploded-tree-family  NP-common-noun/definite
  :schema-type  :mixin
  :labels ( np n-bar np-head )
  :cases
     ((:definite (np ("the" n-bar)
                   :instantiate-individual right-edge
                   :head right-edge))
      (:definite (np ("this" n-bar)
                   :instantiate-individual right-edge
                   :head right-edge))
      (:definite (np ("that" n-bar)
                   :instantiate-individual right-edge
                   :head right-edge))
      (:definite (np ("the" np-head)
                   :instantiate-individual right-edge
                   :head right-edge))
      (:definite (np ("this" np-head)
                   :instantiate-individual right-edge
                   :head right-edge))
      (:definite (np ("that" np-head)
                   :instantiate-individual right-edge
                   :head right-edge))))



(define-exploded-tree-family  np-common-noun/defnp
  :schema-type  :mixin
  :labels ( np n-bar np-head )
  :cases
     ((:definite (np ("the" n-bar)
                   :function dereference-defnp right-edge)
                   :head right-edge)
      (:definite (np ("this" n-bar)
                   :function dereference-defnp right-edge)
                   :head right-edge)
      (:definite (np ("that" n-bar)
                   :function dereference-defnp right-edge)
                   :head right-edge)
      (:definite (np ("the" np-head)
                   :function dereference-defnp right-edge)
                   :head right-edge)
      (:definite (np ("this" np-head)
                   :function dereference-defnp right-edge)
                   :head right-edge)
      (:definite (np ("that" np-head)
                   :function dereference-defnp right-edge)
                   :head right-edge)))


;;--- indefinite articles

(define-exploded-tree-family  NP-common-noun/indefinite
  :schema-type  :mixin
  :binding-parameters ( kind )
  :labels ( np n-bar np-head )
  :cases
     ((:indefinite (np  ("a" n-bar)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                     :head right-edge)
      (:indefinite (np  ("an" n-bar)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                     :head right-edge)
      (:indefinite (np  ("a" np-head)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                     :head right-edge)
      (:indefinite (np  ("an" np-head)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                     :head right-edge)))


(define-exploded-tree-family  NP-common-noun/one-of-several
  :schema-type  :mixin
  :labels ( np np-head )
  :cases
     ((:indefinite (np  ("a" np-head)
                     :subtype indefinite
                     :head right-edge))
      (:indefinite (np  ("an" np-head)
                     :subtype indefinite
                     :head right-edge))))



;;--- both all together

(define-exploded-tree-family  NP-common-noun
  :schema-type  :mixin
  :incorporates  NP-common-noun/definite
  :binding-parameters ( kind )
  :labels ( np n-bar np-head )
  :cases
     ((:indefinite (np  ("a" n-bar)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                   :head right-edge)
      (:indefinite (np  ("an" n-bar)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                   :head right-edge)
      (:indefinite (np  ("a" np-head)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                   :head right-edge)
      (:indefinite (np  ("an" np-head)
                     :instantiate-individual right-edge
                     :subtype indefinite )
                   :head right-edge)))

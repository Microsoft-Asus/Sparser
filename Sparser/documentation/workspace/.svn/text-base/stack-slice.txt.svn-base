 8: (add-subsuming-object-to-discourse-history #<edge2 1 individual 3>)
  9: (complete-edge/hugin #<edge2 1 individual 3>)
 10: (make-default-binary-edge #<edge0 1 "the" 2> #<edge1 2 trunk 3> #<PSR456  individual ->  "the" trunk>)
 11: (check-one-one #<edge0 1 "the" 2> #<edge1 2 trunk 3>)
 12: (do-single/left #<edge1 2 trunk 3>)
 13: (march-back-from-the-right/segment)
 14: (introduce-terminal-edges #<word "trunk"> #<position2 2 "trunk"> #<position3 3 "nil">)
 15: (word-level-actions #<word "trunk"> #<position2 2 "trunk">)
 16: (introduce-terminal-edges #<word "the"> #<position1 1 "the"> #<position2 2 "trunk">)
 17: (word-level-actions #<word "the"> #<position1 1 "the">)
 18: (word-level-actions #<word source-start> #<position0 0 "">)
 19: (lookup-the-kind-of-chart-processing-to-do)
 20: (chart-based-analysis)
  

  7: (referent-from-unary-rule #<edge0 1 unit-of-time 2> #<PSR635  unit-of-time ->  "day"> #<word "day">)
  8: (make-completed-unary-edge #<edges starting at 1> #<edges ending at 2> #<PSR635  unit-of-time ->  "day"> #<word "day">)
  9: (install-preterminal-edge #<PSR635  unit-of-time ->  "day"> #<word "day"> #<position1 1 "day"> #<position2 2 "nil">)
 10: (preterminals/word #<rule-set for #1=#<word "day">> #1# #<position1 1 "day"> #<position2 2 "nil">)
 11: (install-terminal-edges #<word "day"> #<position1 1 "day"> #<position2 2 "nil">)
 12: (introduce-terminal-edges #<word "day"> #<position1 1 "day"> #<position2 2 "nil">)
 13: (word-level-actions #<word "day"> #<position1 1 "day">)
 14: (word-level-actions #<word source-start> #<position0 0 "">)
 15: (lookup-the-kind-of-chart-processing-to-do)
 16: (chart-based-analysis)
 17: (analysis-core)
 18: (let ((output (analyzze-text-from-string string))) (cond ((null output) output) ((listp output) (if # # #)) (t (list 'speech-act # #))))
 19: (pp "day")

  6: ((method generalized-possession (ltml:ts@TemporalIndexical ltml:OwlClass)) #<ts@TemporalIndexical ts@Today> #<Owlclass:ts@Date>)
  7: (ref/function (generalized-possession left-referent right-referent))
  8: (dispatch-on-rule-field-keys (:funcall generalized-possession left-referent right-referent) #<ts@TemporalIndexical ts@Today> #<Owlclass:ts@Date> #<edge3 4 date 5>)
  9: (referent-from-rule #<edge2 1 today 4> #<edge3 4 date 5> #<edge4 1 today 5> #<PSR686  {possessive} -> possessive date>)
 10: (form-rule-completion :left-edge #<edge2 1 today 4> #<edge3 4 date 5> #<PSR686  {possessive} -> possessive date>)
 11: (do-explicit-rule-completion #<edge2 1 today 4> #<edge3 4 date 5> #<PSR686  {possessive} -> possessive date>)
 12: (check-one-one #<edge2 1 today 4> #<edge3 4 date 5>)
 13: (do-single/left #<edge3 4 date 5>)
 14: (march-back-from-the-right/segment)
 15: (introduce-terminal-edges #<word "date"> #<position4 4 "date"> #<position5 5 "nil">)
 16: (word-level-actions #<word "date"> #<position4 4 "date">)
 17: (check-fsa-edge-for-trailing-brackets #<edge1 2 apostrophe-s 4> #<position4 4 "date">)
 18: (cwlft-cont #<word single-quote> #<position2 2 "'">)
 19: (introduce-terminal-edges #<word "today"> #<position1 1 "today"> #<position2 2 "'">)
 20: (word-level-actions #<word "today"> #<position1 1 "today">)
 21: (word-level-actions #<word source-start> #<position0 0 "">)
 22: (lookup-the-kind-of-chart-processing-to-do)
 23: (chart-based-analysis)
 24: (analysis-core)
 25: (let ((output (analyze-text-from-string string))) (cond ((null output) output) ((listp output) (if # # #)) (t (list 'speech-act # #))))
 26: (pp "today's date")

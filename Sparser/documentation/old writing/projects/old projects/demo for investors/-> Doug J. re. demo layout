                                                          1/29/90Doug,      Here is a set of things that we've found uncomfortable aboutthe look and feel of the demo interface.  It's matters of the sizeand positioning of the various windows and the operations and placementsof their buttons/etc..  The mechanisms you used for representing theinformation the interface manipulates are fine  (Which is to say thatit does have a lot of overhead that we will eventually be able to get ridof once we get our act together out here (I'm specifically thinkingof the defstructs that define the options in the Genesis menu andthe structures (instances) that get created when the menu is used --they'll be redundant with things we'll already have independently andwe'll be able to avoid additional consing once we use them directly), but don't touch it now since that would mean burning the code I created to link your visual interface and the code of mine that it sets in motion.)-------------------   Before I get into the particulars, a word about what the directorystructure looks like these days and what I've done to the earliercode that you sent out. [[n.b you ought to have a whole new copy of thesystem with this - new floppies with a full set of the code as I'vegot it organized.  This won't make sense with the older version]]   Notice that all the code is under a single directory, IP, with thecode clustered into two directories, parser and Phoenix.  You shouldn'thave to futz with Phoenix.  Within parser, there's a subdirectorycalled "interface", where all the relevant code has been moved.  Youshouldn't have to touch any code outside of that subdirectory. (If youhave to, I've modularized things wrong.)   You can send back all your changesas a new version of the interface subdirectory.   To load up the system you open the "init" directory inside "parser"and launch the file named "everything" (essentially the same idea asbefore).  You'll have had to edit that file before you launch it so thatthe logical pathnames in it can be changed to reflect where you've putthe IP directory on your disk.  It's the only thing you have to editto get the system up.  As soon as Allegro comes up you'll be asked whetheryou want to load the "demo" version.  Say yes. For the purposes of what you've got to work on it won't really matter which choice you make though;it you say no you get the most current version that I'm working on.Once the entire system has loaded you get asked whether you want tosave out an image. Presumably you do, since you can test your changesacross sucessive launches of the image by adding calls to load anyfiles you've changed to the indicated place in the "updating" filewithin the appropriate subdirectory of "init" (i.e. "system 0" if youloaded the demo version, "system 1" otherwise).  The calls that activatethe menus are in the "updating" file so any revised code you load beforethey run will take effect.   Inside the interface directory there are three directories and two files.  There's loader, which is how anything in that directory getsloaded into the system at all. (I.e. there's a call (load "interface;loader")in the system load file -- the system load file isn't to know aboutthe internal structure of the interface directory.  Sort of a poorman's module.)     I've consolidated your menus and modified their wording and whatfunctions they call (in some cases), and I've written another menu (for"training") by copy&specializing yours.  Virtually all the menusin the demo are now in the file "alerts menu".  Your originals (or withslight variations) are in the two directories you supplied, "GenesisMenu" and "Parser Menu", but they aren't the ones that run.     We should keep it this way.  That is, the menus that drive thedemo are the ones in "interface;alerts menu" -- the fewer changes tothe interface between our two bodies of code the better.  You canmake all the changes you need by tweeking the code that the routinesin alerts menu references - eh?  Maybe consolidate it a bit while you'reat it?----------------   So down to specifics. I'll take the menus in order from the leftas they appear when the system comes up.  I'll go through appearanceand placement first for everything and then come back to a global point.Training:  nothing really needs to be done.  You run it by selecting the itemson that menu in order one at a time from the top: "load ..." pulls ina file; "show..." brings up a window with a text string in it.  I usea simple routine I took from you for that -- the window is bigger thanit needs to be, so I suppose it would be nicer to know the parametersthat are fed to that routine to make the window a specific size.The next menu pick is "train" -- it has that text string parsed and thengoes through and asks a set of questions about it via the lisplistener.John IS interested in having that question/answering moved from the LL tosome sort of dialog box -- something with provisions for asking forother examples of the same thing, for getting a display of the largercontext, whathaveyou.  We'd want to go over what's possible / what isthe right lookandfeel/functionality before you put any energy into it.The last menu pick, test, just runs an analysis of one particular articleso there's nothing special about that.---------------------Staff:   You'll recognize the pieces of this one and the others.  I couldnot get "fire staff member" (or whatever you'd called it) to work (I don'trecall just now what errors I got), so I left it out.  Not being ableto dismiss staff doesn't seem to be a problem given how John is doingthe demo though.   "Hire Staff"  --could you move the position at which the dialog boxappears?  Right now, it appears centered and a bit more than three quartersof the way down the screen, i.e. not much off of the bottom.  That meansthat on a big screen like mine (19") it's about 6 inches down fromwhere one's eyes are when looking at the Alerts menu and such, whichmakes it a big distraction to shift your attention that much.  Could youmove it to, say, still centered left to right, but now only an inch downfrom the top of the screen (say 100 point/pixels down --I've got a 72dpiscreen and most of what we've demo'd on has been comparable.)   "Activate" is just a stub at the moment, nothing to do there.------------------------Run:  nothing to do.-------------------------Alerts:  lots to do.   "Create new Alert"  -- The alerts window is way too big.  It's widthis pretty good, since having positions for four arguments seems good.But the box region where the structure appears is drastically larger thanwe ever use.  Could you make it half the height it presently is?  Forthat matter, the fact that we only every use about half of its lengthis also ugly (ugly = evidence to the viewer that the interface wascobbled together out of stuff that's lying around rather than tailoredto what we need -- since "tailoring" is mostly just changing dimensionsof things, it should be easy to make the problem go away - eh?)  Does thebox have to go across the entire width of the window?    There's an inch or so of empty space under the argument text-inputboxes.  Could you take that up to say 1/3d of what it presently is?    The radio buttons associated with the argument boxes don't work, whichis to say that when you turn them on, their box is not simultaneouslyselected for input; you have to also click inside the box before youcan type there (which leads to really dumb mistakes since John invariablyclicks the radio button first and sometimes forgets to also click inthe box).  Either make clicking the button select the box or remove thebottons.    Once you enter the data you've typed into an argument box (by hittingreturn), the box to the left is automatically selected.  It should bethe box to the right instead.  (Another way to think of it is that usingthe Tab key to move through the sequence of boxes always moves youleftwards -- I imagine the two mechanisms are the same.)  It should eithermove rightwards (tabs would go left to right) or the mechanism shouldbe disabled. (Try to reverse the direction, since using tabs to movebetween sucessive activity boxes is an expected part of Mac interfaces.)      "Select category"   Can you change it to be a normal window thatpermits you to ignore it momentarily and operate on other windows/menus?It's annoying that you have to act on it right then and there (or elsecancel and restart later) since it forces the tempo of the demo andremoves options.   Re. the inner large box where the categories are listed:  Make itabout a half of its present length (it's got scroll bars, we can usethem should we someday get a drastically longer set of categories thentwo or three.  Keep the present width.   Remove the "new" option and "slots".  We don't use them since weconstruct the file that drives this dialog by running a program andwriting out the results. (That's in a few days -- right now I buildthem by hand by editing the old ones from Fred.)   Move up the cancel and ok buttons to right below the subclass button,and make the ok a default if you can. (i.e. if one just types returnit will be as if the ok button had been pushed.   The short rectangle just below the large box where the categoriesappear seems to be superfluous (i.e. I type into it and hit return butnothing happens). Remove it.   Change the name of the window to "Select Category of Alert".  "Assign alert to staff" is fine, especially its operation of throwingup the staff naming dialog if there are no staff in existence.  The onlyproblem I can see (if one is being sloppy in driving the demo and notthinking ahead) is that there's no provision for canceling.  If you hadindented to assign the alert to a staff member you handn't yet hiredyou won't get the option since there's no (apparent) way to dismiss theselection box without making a choice.   "Alerts on/off"   Fine as it stands, but it prompts the questionof how one creates hierarchical menus like that which have multiplelevels.  We're figuring that when there are dozens of alerts definedthat this alerts on/off menu is going to be unworkable.  We'd insteadlike to move them to the staff menu.  So the first level off of the"activate" option under Staff would show you all the staff you'vedefined, then moving out to a particular staff member would get youthe alerts that were associated with it.  That would make the hierarchytwo deep (or three I suppose, depends on how you count).  I can easilyimagine wanting it arbitrarily deep (5 or 6 anyway) if we changed thenotion of the "staff" to be a hierarchy of categories: that would interposesubcategories (or subsubcategories) in the hierarchy before one gotdown to the actual alerts.  I'd need a schema (documentation) of howa multi-level menu was done since I couldn't tell you now specificallywhat we'd need.--------------------That all on appearance and placement.  The other matter is how optionsare greyed out.  Right now the only influence is in the Alerts menu andis controlled by whether the Alerts window is selected or not.  That'sjust too arbitrary and hard to figure out.  I need a sort of a statespace:  "Alerts on/off" should be grey unless there are some alertsalready defined -- so when you first start up the system the onlything available should be the first choice: "create new alert".   Once you've picked that and the alerts window has come up, thenthe "create new alert" option should grey out and "select category"should become available.  Once you run through that dialog it shouldgrey out and "Assign alert to staff" become available.  Once you'veassigned the alert, the alerts window should close. (This is to keep one fromforgetting and editing the object that's there -- remember that we'renot using the "editor" aspect of your interface at all.  It's justa means of not having to enter the data (function calls) in thelisplistener.  If a structure/alert is edited after it's been assigned, it screws up (deletes) the alert you'd just defined, whichmakes the demo very confusing.)  With the window you just used closed,the menu goes back to its intial state.     Ditto with the training menu.  Since that menu is run from top tobottom in sucession, it should start out with everything grey exceptthe first and second choices.  The "train" choice should be greyed outuntil the "load..." choice has been taken.  The "load.." choice shouldgo to grey as soon as it's taken since it's a one-shot.  The "train"choice is also a one-shot.  "Test" should be grey until "train" hasbeen run.   The options under Staff and Run are valid all the time. 
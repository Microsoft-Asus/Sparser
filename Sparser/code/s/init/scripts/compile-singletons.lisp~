;;; -*- Mode:LISP; Syntax:Common-Lisp; Package:(CL-USER COMMON-LISP) -*-
;;; copyright (c) 1991-1996  David D. McDonald  -- all rights reserved
;;; Copyright (c) 2007 BBNT Solutions LLC. All Rights Reserved
;;; $Id:$
;;;
;;;      File:   "compile-everything"
;;;    Module:   "init;scripts:"
;;;   version:   0.2 January 2007

;; This file sets up the parameter settings to drive the loading
;; of the system in it's "copy all the files to a new directory" mode.
;; It is intended to be launched from toplevel.
;; Note the hard pathnames at the end

;; 0.1 (4/6) added probef's to simplify use on multiple systems
;;     (5/11) added one for 900.  (11/28/95) brought it all up to date
;; 0.2 (6/19/96) removed vestige of query for whether to do the single files and made
;;      it automatic. Removed explicit versioning in favor of the logical.
;;     (1/24/07) Incorporated current pathnames

(in-package :cl-user)

;;;--------------------
;;; define the package
;;;--------------------

(or (find-package :sparser)
    (make-package :sparser
                  :use #+:apple '(ccl common-lisp)
                       #+:unix  '(common-lisp)
                       ))

;;;----------------------
;;; setup the parameters
;;;----------------------

(defparameter sparser::*compile*  t)



;;;--------------------------------------------------
;;; do the compilation (and load the compiled files)
;;;--------------------------------------------------

(in-package :sparser)

(defparameter cl-user::location-of-Sparser-directory
  (cond
    ((probe-file "~/ws/nlp/Sparser") ;; ddm's BBN Intel Mac
     "~/ws/nlp/Sparser/")

   ((probe-file "Book:David:")  ;; M&D's powerbook
    (unless (boundp 'cl-user::location-of-root-directory)
      (defparameter cl-user::location-of-root-directory "Book"))
    (unless (boundp 'sparser::*monitor-size*)
      (defparameter sparser::*monitor-size* :8-inch))
    (unless (boundp 'cl-user::location-of-text-corpora)
      (defparameter cl-user::location-of-text-corpora
        "Book:David:Sparser:corpus:")
      ;; on the assumption that we're actually making this
      ;; load on the Zip drive rather than the Book (because
      ;; the book has too little memory), then we set this
      ;; flag so that it will wait on loading the files
      ;; that define the corpus items until the image
      ;; is launched on the book (see config;launch)
      (defparameter sparser::*connect-to-the-corpus* nil))
    (unless (boundp 'sparser::*known-machine*)
      (defparameter sparser::*known-machine* :book))
    "Book:David:Sparser:" )
   
   ((probe-file "Feda:")   ;; Br700
    (unless (boundp 'cl-user::location-of-root-directory)
      (defparameter cl-user::location-of-root-directory
        "Feda:ddm:professional:archive"))
    (setq *features* (push :full-corpus *features*))
    (unless (boundp 'sparser::*monitor-size*)
      (defparameter sparser::*monitor-size* :20-inch))
    (unless (boundp 'cl-user::location-of-text-corpora)
      (defparameter cl-user::location-of-text-corpora
        (concatenate 'string string "corpus:")))
    (unless (boundp 'sparser::*known-machine*)
      (defparameter sparser::*known-machine* :br-700))
    "ddm:stuff:Sparser:" )
   
   ((probe-file "Sparser:writing:")  ;; ddm's 8100
    (unless (boundp 'cl-user::location-of-root-directory)
      (defparameter cl-user::location-of-root-directory ""))
    (setq *features*
          (push :full-corpus *features*))
    (unless (boundp 'sparser::*monitor-size*)
      (defparameter sparser::*monitor-size* :20-inch))
    (unless (boundp 'cl-user::location-of-text-corpora)
      (defparameter cl-user::location-of-text-corpora "Corpora:"))
    (unless (boundp 'sparser::*known-machine*)
      (defparameter sparser::*known-machine* :ddm-8100))
    "Sparser:" )

   (t (break "None of the anticipated values for~%    ~
              cl-user::location-of-Sparser-directory~
              match the layout on ~A.~
              ~%Set the symbol to the appropriate value ~
              and continue." (user-homedir-pathname)))))
         

(setq *load-verbose* t)

(load #+:apple (concatenate 'string cl-user::location-of-Sparser-directory
                   "code:s:init:versions:"
                   "v2.7:"   ;;/////////////////////
                   "loaders:lisp-switch-settings")
      #+:unix (concatenate 'string cl-user::location-of-Sparser-directory
			   "code/s/init/versions/"
			   "v2.7/"
			   "loaders/lisp-switch-settings.lisp"))
)

(load #+:apple (concatenate 'string
                   cl-user::location-of-Sparser-directory
                   "code:s:init:"
                   "everything"
                   ;; "scripts:v2.3ag"
                   ;; "BBN"
                   )
      #+:unix (concatenate 'string
                   cl-user::location-of-Sparser-directory
                   "code/s/init/"
                   "everything.lisp"
                   ;; "scripts:v2.3ag"
                   ;; "BBN"
                   ))

;; #+:unix "/usr/users/guest/sparser/s/init/everything"
 

(just-compile "init;everything")

(just-compile "init;Lisp:kind-of-lisp")
(just-compile "init;Lisp:grammar-module")
(just-compile "init;Lisp:ddef-logical")
(just-compile "init;Lisp:lload")

(just-compile "init;scripts:Academic version")
(just-compile "init;scripts:Apple loader")
(just-compile "init;scripts:BBN")
(just-compile "init;scripts:compile everything")
(just-compile "init;scripts:compile academic")
(just-compile "init;scripts:copy everything")
(just-compile "init;scripts:copy academic")
(just-compile "init;scripts:just dm&p")
(just-compile "init;scripts:no grammar")
(just-compile "init;scripts:SUN")
(just-compile "init;scripts:v2.3a")    ;; standard
(just-compile "init;scripts:v2.3ag")   ;; "academic grammar"
(just-compile "init;scripts:v2.3g")    ;; (public) "grammar"

(just-compile "version;loaders:grammar")
(just-compile "version;loaders:grammar modules")
(just-compile "version;loaders:lisp-switch-settings")
(just-compile "version;loaders:logicals")
(just-compile "version;loaders:master-loader")
(just-compile "version;loaders:model")
(just-compile "version;loaders:save routine")
(just-compile "version;loaders:stubs")

(just-compile "version;salutation")
(just-compile "version;updating")

(just-compile "config;explicitly-loaded-files")
(just-compile "config;image")
(just-compile "config;launch")
(just-compile "config;load")

(just-compile "grammar-configurations;academic grammar")
(just-compile "grammar-configurations;AssetNet")
(just-compile "grammar-configurations;bbn")
(just-compile "grammar-configurations;Debris analysis")
(just-compile "grammar-configurations;full grammar")
(just-compile "grammar-configurations;minimal dm&p grammar")
(just-compile "grammar-configurations;partial grammar")
(just-compile "grammar-configurations;public grammar")
(just-compile "grammar-configurations;SUN")

(just-compile "images;do-the-save")

;;(just-compile "init;workspaces:Apple")  -- references Lingsoft pkg
(just-compile "init;workspaces:Darwin")
(just-compile "init;workspaces:dm&p")
(just-compile "init;workspaces:generic")
(just-compile "init;workspaces:Mari")
(just-compile "init;workspaces:quarterly earnings")
(just-compile "init;workspaces:Sandia")
(just-compile "init;workspaces:SUN")
(just-compile "init;workspaces:SUN1")
(just-compile "init;workspaces:SUN2")
(just-compile "init;workspaces:Switchboard")
(just-compile "init;workspaces:text segments")
(just-compile "init;workspaces:tipster")
(just-compile "init;workspaces:Who's News")
(just-compile "init;workspaces:workbench")


:finished-compilation


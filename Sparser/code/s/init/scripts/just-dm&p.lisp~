;;; -*- Mode:LISP; Syntax:Common-Lisp; Package:(CL-USER COMMON-LISP) -*-
;;; copyright (c) 1995  David D. McDonald  -- all rights reserved
;;; Copyright (c) 2006-2007 BBNT Solutions LLC. All Rights Reserved
;;; $Id:$
;;;
;;;      File:   "just dm&p"
;;;    Module:   "init;scripts:"
;;;   version:   January 2007

;; initiated 7/13/95
;; 11/06 Started tweaking for situation reports
;; 11-1/07 Modified to support messages in FPM project.

(in-package :cl-user)

#|  ----- This file is intended to be loaded first. ----- |#

;;;---------------------------
;;; Platform-specific globals
;;;---------------------------

;;; Specialize this global to the equivalent place on your machine
;;; If running in a unix-based lisp such as Allegro (i.e. one that
;;; sets the  #+unix feature in *features*), this global can be
;;; removed because the code in everything.lisp will calculate its
;;; file location automatically.
;;;   If you don't set it, then provide a hard pathname in the
;;; call to load at the bottom on this file.

(unless (boundp 'location-of-Sparser-directory)
  (defparameter location-of-Sparser-directory
    #+apple "G4:Users:ddm:nlp:Sparser:"
    #+unix  "/Users/ddm/ws/nlp/Sparser/"
    ))


;;;--------------------
;;; define the package
;;;--------------------

(or (find-package :sparser)
    (make-package :sparser
                  :use #+:apple '(ccl common-lisp)
                       #+:unix  '(common-lisp)
                       ))


;;;-------------------------------------------------
;;; setup the parameters -- specialize the defaults
;;;-------------------------------------------------

(defparameter sparser::*pure-dm&p-load* t)
(defparameter sparser::*load-ad-hoc-rules* t)
(defparameter sparser::*sit-rep-grammar* t)


(defparameter sparser::*lattice-points* t) ;; really?
(defparameter sparser::*no-image* t)
(defparameter sparser::*connect-to-the-corpus* nil)

(defparameter sparser::*nothing-Mac-specific* 
  #+unix t
  #+apple nil
  )

(defparameter sparser::*edges-from-referent-categories* nil)
;; See Multiply-edges -- this is the idea of parsing off referents rather
;; than just edge categories.



;;;-----------------
;;; call the loader
;;;-----------------
;;---- Utility

(defmacro def-string (&rest strings)
  `(concatenate 'string ,@strings))

(export 'def-string (find-package :cl-user))


(load (def-string location-of-Sparser-directory
	#+apple "code:s:init:everything"
	#+unix  "code/s/init/everything"
	))


;;;------------------------
;;; bring up the workspace 
;;;------------------------

#+apple (ed (def-string location-of-Sparser-directory
		#+apple "code:s:init:workspaces:dm&p"
		#+unix  "code/s/init/workspaces/dm&p.lisp"
		))
